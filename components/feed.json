{"item": 
  [
      {
        "key": "hatenablog://entry/26006613464484345",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/11/19/132913?utm_source=feed",
        "title": "スクリプトをローカルでテストする",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171212/20171212211252.png\" alt=\"f:id:mbaasdevrel:20171212211252p:plain\" title=\"f:id:mbaasdevrel:20171212211252p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>スクリプトを開発する際、ローカルで手軽にテストできると開発がスムーズに進むでしょう。その際に使える環境として、<a href=\"https://github.com/NCMBMania/node-script-dev-env\">NCMBMania/node-script-dev-env: Node.jsを使ったスクリプト機能の開発環境です</a>と<a href=\"https://github.com/NCMBMania/ruby-script-base\">NCMBMania/ruby-script-base</a>を用意していますが、実行はcurlコマンドなどを使わないといけない点が手間です。そこで、ローカルで立てているこれらの環境にJavaScript SDKからアクセスする方法を紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#JavaScript-SDKの初期化オプションを利用する\">JavaScript SDKの初期化オプションを利用する</a></li>\n    <li><a href=\"#実行側スクリプトのパス修正\">実行側スクリプトのパス修正</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"JavaScript-SDKの初期化オプションを利用する\">JavaScript SDKの初期化オプションを利用する</h2>\n\n<p>例えば <a href=\"http://localhost:3000/\">http://localhost:3000/</a> でテスト環境が立ち上がっているとします。この場合、JavaScript SDKを初期化する際に次のように行います。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> applicatioinKey = <span class=\"synConstant\">'b34...01e'</span>;\n<span class=\"synStatement\">const</span> clientKey = <span class=\"synConstant\">'489...462'</span>;\n<span class=\"synStatement\">const</span> ncmb = <span class=\"synStatement\">new</span> NCMB(applicatioinKey, clientKey, <span class=\"synIdentifier\">{</span>\n  scriptFqdn: <span class=\"synConstant\">'localhost'</span>,\n  protocol: <span class=\"synConstant\">'http:'</span>,\n  port: 3000\n<span class=\"synIdentifier\">}</span>);\n</pre>\n\n\n<p>scriptFqdnはスクリプトの実行サーバ、そしてプロトコルはデフォルトがHTTPSになっていますので、HTTPに変更します。さらにポート番号を指定して完了です。</p>\n\n<h2 id=\"実行側スクリプトのパス修正\">実行側スクリプトのパス修正</h2>\n\n<p>node-script-dev-envの例を示します。デフォルトでは <code>http://localhost:3000/</code> でスクリプトが実行できるのですが、JavaScript SDKでは次のようにスクリプトを呼び出します。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>http://localhost:3000/2015-09-01/script/some.js</pre>\n\n\n<p>そこで、 index.js を修正します。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synComment\">// 修正前</span>\napp.all(<span class=\"synConstant\">'/'</span>, script);\n\n<span class=\"synComment\">// 修正後</span>\napp.all(<span class=\"synConstant\">'/2015-09-01/script/some.js'</span>, script);\n</pre>\n\n\n<p>このようにすれば、ローカル環境でも自作のコードからスクリプトが自由に呼び出せます。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>なお、プロトコルやポートの指定はデータストアや認証などのスクリプト以外の機能も影響を受けてしまうので注意してください。利用はあくまでもスクリプトだけを実行する場合に限定されます。</p>\n\n<p>一定のワークフローの中でスクリプトを呼び出す場合のテストにちょうど良いのでお試しください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "スクリプトを開発する際、ローカルで手軽にテストできると開発がスムーズに進むでしょう。その際に使える環境として、NCMBMania/node-script-dev-env: Node.jsを使ったスクリプト機能の開発環境ですとNCMBMania/ruby-script-baseを用意していますが、実行はcurlコマンドなどを使わないといけない点が手間です。そこで、ローカルで立てているこれらの環境にJavaScript SDKからアクセスする方法を紹介します。",
        "date_published": "2019-11-19T04:29:13.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613464858129",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/11/15/165957?utm_source=feed",
        "title": "mBaaSの認証を活用してGitHub認証を行ってみた",
        "content_html": "<p>※ これはあくまでも実験です。本番環境での利用はお勧めしません。</p>\n\n<p>mBaaSでは認証機能としてID/パスワード認証の他、メールアドレス、ソーシャル（Google/Facebook/Twitter）認証、匿名認証を提供しています。しかし運用上、他の認証（今回はGitHub）にも対応したいと思うこともあるでしょう。今回はそんなチャレンジです。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#利用するのは匿名認証\">利用するのは匿名認証</a></li>\n    <li><a href=\"#GitHub認証を行う\">GitHub認証を行う</a></li>\n    <li><a href=\"#コードを取得する\">コードを取得する</a></li>\n    <li><a href=\"#アクセストークンを取得する\">アクセストークンを取得する</a></li>\n    <li><a href=\"#ユーザ情報を取得する\">ユーザ情報を取得する</a></li>\n    <li><a href=\"#匿名認証用のIDを生成する\">匿名認証用のIDを生成する</a></li>\n    <li><a href=\"#匿名認証を行う\">匿名認証を行う</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"利用するのは匿名認証\">利用するのは匿名認証</h2>\n\n<p>GitHubの認証情報に沿って匿名認証用のIDを生成できれば認証は可能です。なお、匿名認証のIDは下記のようなフォーマットになっています。16進数に適合する0〜9の数字とa-fの文字列が8桁/4桁/4桁/4桁/4桁/12桁とつながって、全体で32桁（と5つの-）となっています。正規表現で表すと次のようになります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}</pre>\n\n\n<p>GitHubの認証情報から、このIDを生成できればNCMBでも認証が可能になります。</p>\n\n<h2 id=\"GitHub認証を行う\">GitHub認証を行う</h2>\n\n<p>GitHubで認証を行うには、まずGitHubアプリを作ります。作るとクライアントIDとクライアントシークレットの二つの情報が手に入ります。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20191112/20191112110839.png\" alt=\"f:id:mbaasdevrel:20191112110839p:plain\" title=\"f:id:mbaasdevrel:20191112110839p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>まずクライアントIDを使って、GitHubで認証に関する許可を得ます。その際、ランダムな文字列を渡して（下記state）、レスポンスでそのstateを確認することで、改善されていないことを保証します。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> gitHubAuthUrl = <span class=\"synConstant\">'https://github.com/login/oauth/authorize'</span>;\n<span class=\"synStatement\">const</span> clientId = <span class=\"synConstant\">'Iv1...ea6'</span>;\n<span class=\"synStatement\">const</span> redirectUri = <span class=\"synConstant\">'http://localhost:8000/'</span>;\n<span class=\"synStatement\">const</span> state = Math.random().toString(32).substring(2);\n<span class=\"synStatement\">location</span>.href = `$<span class=\"synIdentifier\">{</span>gitHubAuthUrl<span class=\"synIdentifier\">}</span>?redirect_uri=$<span class=\"synIdentifier\">{</span>redirectUri<span class=\"synIdentifier\">}</span>&amp;client_id=$<span class=\"synIdentifier\">{</span>clientId<span class=\"synIdentifier\">}</span>&amp;state=$<span class=\"synIdentifier\">{</span>state<span class=\"synIdentifier\">}</span>&amp;scope=user`;\n</pre>\n\n\n<h2 id=\"コードを取得する\">コードを取得する</h2>\n\n<p>GitHubでアクセスを許可すると認可コードが得られます。これを使ってアクセストークンを得るのですが、次のステップではクライアントシークレットを使います。クライアントシークレットをWebブラウザやクライアントサイドのJavaScriptに記述してしまうのは避けたいので、次の処理はスクリプト機能を使います。クエリストリングからの取得は <a href=\"https://github.com/websanova/js-url\">js-url</a> を使っています。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> code = url(<span class=\"synConstant\">'?code'</span>);\n<span class=\"synStatement\">const</span> state = url(<span class=\"synConstant\">'?state'</span>);\nawait ncmb.Script\n  .query(<span class=\"synIdentifier\">{</span>\n    code: code,\n    state: state\n  <span class=\"synIdentifier\">}</span>)\n  .exec(<span class=\"synConstant\">&quot;GET&quot;</span>, <span class=\"synConstant\">&quot;githtub.js&quot;</span>)\n</pre>\n\n\n<h2 id=\"アクセストークンを取得する\">アクセストークンを取得する</h2>\n\n<p>ここからはスクリプトの処理です。まず先ほど受け取ったコードを使ってアクセストークンを取得します。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> request = require(<span class=\"synConstant\">'superagent'</span>);\n<span class=\"synStatement\">const</span> clientId = <span class=\"synConstant\">'Iv1...ea6'</span>;\n<span class=\"synStatement\">const</span> clientSecret = <span class=\"synConstant\">'160...cd1'</span>;\n<span class=\"synStatement\">const</span> redirectUri = <span class=\"synConstant\">'http://localhost:8000/'</span>;\n\n<span class=\"synStatement\">const</span> response = await request\n  .post(<span class=\"synConstant\">'https://github.com/login/oauth/access_token'</span>)\n  .set(<span class=\"synConstant\">'Accept'</span>, <span class=\"synConstant\">'application/json'</span>)\n  .send(<span class=\"synIdentifier\">{</span>\n    client_id: clientId,\n    client_secret: clientSecret,\n    redirect_uri: redirectUri,\n    code: req.query.code,\n    state: req.query.state\n  <span class=\"synIdentifier\">}</span>);\n<span class=\"synStatement\">const</span> json = response.body;\n<span class=\"synStatement\">if</span> (!json.access_token) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">return</span> res.send(json);\n<span class=\"synIdentifier\">}</span>\n</pre>\n\n\n<h2 id=\"ユーザ情報を取得する\">ユーザ情報を取得する</h2>\n\n<p>アクセストークンが得られたら、そのトークンを使ってログインユーザの情報を取得します。この時のTipsとして、ユーザエージェントが必須なので注意してください。アクセストークンはAuthorizationヘッダーに token という文字を頭につけて記述します。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> userResponse = await request\n  .get(<span class=\"synConstant\">'https://api.github.com/user'</span>)\n  .set(<span class=\"synIdentifier\">{</span>\n    <span class=\"synConstant\">'Accept'</span>: <span class=\"synConstant\">'application/json'</span>,\n    <span class=\"synConstant\">'User-Agent'</span>: <span class=\"synConstant\">'curl/7.43.0'</span>,\n    <span class=\"synConstant\">'Authorization'</span>: `token $<span class=\"synIdentifier\">{</span>json.access_token<span class=\"synIdentifier\">}</span>`,\n  <span class=\"synIdentifier\">}</span>)\n  .send();\n<span class=\"synStatement\">const</span> user = userResponse.body;\n</pre>\n\n\n<p>これでユーザ情報が手に入りました。</p>\n\n<h2 id=\"匿名認証用のIDを生成する\">匿名認証用のIDを生成する</h2>\n\n<p>問題はここからで、ユーザ情報から匿名認証用のIDを生成する処理が必要です。そこで注目したのがnode_idです。これはGraphQL用のIDとのことで、次のような文字列になります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>MDU6SXNzdWU0MzIzNTg0NzE=</pre>\n\n\n<p>この文字列を下記のように変換すると、32桁の16進数になります。具体的な処理はコードを参照してください。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> code = user.node_id.split(<span class=\"synConstant\">&quot;&quot;</span>).map(a =&gt; a.charCodeAt(0).toString(16)).join(<span class=\"synConstant\">&quot;&quot;</span>);\n<span class=\"synComment\">// 4d44553653584e7a645755304d7a497a4e5467304e7a453d</span>\n</pre>\n\n\n<p>32桁の16進数になれば、後は正規表現で桁数に区切るだけです。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> id = num.replace(<span class=\"synConstant\">/([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12})/</span>, <span class=\"synConstant\">'$1-$2-$3-$4-$5'</span>);\n<span class=\"synComment\">// 4d445536-5358-4e7a-6457-55304d7a497a4e5467304e7a453d</span>\n</pre>\n\n\n<h2 id=\"匿名認証を行う\">匿名認証を行う</h2>\n\n<p>IDが生成できたら、匿名認証を実行します。認証したら、ユーザ情報を返します。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> auth = await ncmb.User.loginAsAnonymous(id);\nres.send(ncmb.User.getCurrentUser());\n</pre>\n\n\n<p>これでGitHubを使った認証処理が完了しました。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>node_idが不変なものであるか、常に32桁の16進数になるとは限らないので注意してください。とはいえ、IDさえ何らかの条件に従って生成できれば、別な認証プロバイダを組み合わせるのは難しくなさそうです。もちろん、その生成アルゴリズムが漏洩すると、直接認証されてしまう可能性もあるので注意してください。少なくとも生成はサーバサイドで行うべきでしょう。</p>\n\n<p>今回のコードはあくまでも実験ですが、何かの参考になれば幸いです。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "※ これはあくまでも実験です。本番環境での利用はお勧めしません。 mBaaSでは認証機能としてID/パスワード認証の他、メールアドレス、ソーシャル（Google/Facebook/Twitter）認証、匿名認証を提供しています。しかし運用上、他の認証（今回はGitHub）にも対応したいと思うこともあるでしょう。今回はそんなチャレンジです。",
        "date_published": "2019-11-15T07:59:57.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613442729336",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/11/08/095821?utm_source=feed",
        "title": "PWAを構成する技術と、それを支えるサービスについて",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930153559.png\" alt=\"f:id:mbaasdevrel:20190930153559p:plain\" title=\"f:id:mbaasdevrel:20190930153559p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>PWA（Progressive Web Apps）は単一の技術を指し示す言葉ではなく、ユーザがより良いWeb体験をするための総合技術となっています。そのため、これをすればPWA対応した、とは言い切れません。</p>\n\n<p>今回はPWAを構成する技術と、それを利用するためのクラウドサービスを紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#ホスティング\">ホスティング</a></li>\n    <li><a href=\"#Webプッシュ\">Webプッシュ</a></li>\n    <li><a href=\"#GraphQL\">GraphQL</a></li>\n    <li><a href=\"#その他の技術\">その他の技術</a></li>\n</ul>\n\n<h2 id=\"ホスティング\">ホスティング</h2>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930153547.png\" alt=\"f:id:mbaasdevrel:20190930153547p:plain\" title=\"f:id:mbaasdevrel:20190930153547p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>PWAはオフラインでも使えるのが大事であり、そのためにはWebフロントエンドとサーバサイドはAPIを通じた疎結合になっている必要があります。そこでフロントエンドのコードは静的ホスティングサイトに置いておくことができます。</p>\n\n<p>例えば以下のようなサービスが挙げられます。</p>\n\n<ul>\n<li><a href=\"https://firebase.google.com/docs/hosting?hl=ja\">Firebase Hosting  |  Firebase</a></li>\n<li><a href=\"https://www.netlify.com/\">Netlify: All-in-one platform for automating modern web projects.</a></li>\n<li><a href=\"https://aws.amazon.com/jp/s3/\">Amazon S3（拡張性と耐久性を兼ね揃えたクラウドストレージ）｜AWS</a></li>\n</ul>\n\n\n<p>独自ドメインを使う場合にはAmazon S3 + Cloudfrontという組み合わせになるでしょう。NetlifyやFirebase HostingはカスタムドメインのSSL/TLS証明書（Let's Encript利用）発行に対応しています。</p>\n\n<h2 id=\"Webプッシュ\">Webプッシュ</h2>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930153559.png\" alt=\"f:id:mbaasdevrel:20190930153559p:plain\" title=\"f:id:mbaasdevrel:20190930153559p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>Webプッシュはベンダー独自のものとVAPIDとがあります。macOSのSafariを除外すれば、VAPIDでChrome/Firefox/EdgeといったWebブラウザに対応できます。Webプッシュ通知を送った後の開封、数値分析を行うならばプッシュ通知配信を行うサービスを使うのが良いでしょう。</p>\n\n<p><a href=\"https://push7.jp/\">Webプッシュ通知を5分で導入 - 効果を求めるならPush7</a></p>\n\n<h2 id=\"GraphQL\">GraphQL</h2>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930153608.png\" alt=\"f:id:mbaasdevrel:20190930153608p:plain\" title=\"f:id:mbaasdevrel:20190930153608p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>フロントエンドとサーバサイドでREST APIを使うのも良いですが、最近ではGraphQLの採用も進んでいます。GraphQLのクラウドサービスは最近では減っており、以下のAWSのサービスが安心して利用できるでしょう。</p>\n\n<p><a href=\"https://aws.amazon.com/jp/appsync/\">AWS AppSync（アプリデータをリアルタイムで保存、同期）| AWS</a></p>\n\n<h2 id=\"その他の技術\">その他の技術</h2>\n\n<p>PWAを担う技術としては、残りはレスポンシブWebデザイン、SSL/TLS、アプリマニフェスト、Service Workerになります。これらはクラウドサービスを使うものではありません。Service WorkerはWebプッシュ、オフラインアクセス（CACHE API）で利用するものなので重要です。ぜひ使い方を覚えてください。</p>\n\n<p>PWAでバックエンドが必要になったら、ぜひニフクラ mobile backendをご利用ください！</p>\n\n<p><a href=\"https://mbaas.nifcloud.com/\">mBaaSでサーバー開発不要！ | ニフクラ mobile backend</a></p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "PWA（Progressive Web Apps）は単一の技術を指し示す言葉ではなく、ユーザがより良いWeb体験をするための総合技術となっています。そのため、これをすればPWA対応した、とは言い切れません。 今回はPWAを構成する技術と、それを利用するためのクラウドサービスを紹介します。",
        "date_published": "2019-11-08T00:58:21.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613453641302",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/11/08/095542?utm_source=feed",
        "title": "NCMBをIoTで使うときのTips紹介",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20191022/20191022093151.png\" alt=\"f:id:mbaasdevrel:20191022093151p:plain\" title=\"f:id:mbaasdevrel:20191022093151p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>ニフクラ mobile backendはmBaaS（mobile Backend As a Service）として知られていますが、IoT分野においても多数利用されています。デバイス側の開発も必要なIoTにおいて、サーバサイドの開発をmBaaSに委ねられるのは開発工数を減らす上でもお勧めです。</p>\n\n<p>そこで今回はNCMBをIoTにおいて利用する際のテクニックを幾つかご紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#SDKがなくとも大丈夫\">SDKがなくとも大丈夫</a></li>\n    <li><a href=\"#データを取得する場合\">データを取得する場合</a></li>\n    <li><a href=\"#ファイルストアにはHTTPSでアクセスする\">ファイルストアにはHTTPSでアクセスする</a></li>\n    <li><a href=\"#データを更新する\">データを更新する</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"SDKがなくとも大丈夫\">SDKがなくとも大丈夫</h2>\n\n<p>IoT分野においてはフットプリントの小さい、低負荷なプログラミング言語が選ばれます。例えばCやC++などになります。そうした言語向けにNCMBではデフォルトではSDKを提供していません。でも利用する方法はあります。</p>\n\n<p>データを新規登録するPOSTメソッドの場合、タイムスタンプを固定にすると生成される署名も同じものになります。例えば温度や湿度、輝度などの数値が変わったとしても同じ署名を使ってNCMBへデータ登録ができます。</p>\n\n<p>この特性を使うことで、正しいタイムスタンプと署名の組み合わせを生成しておけば、プログラムの固定値として書き込めるようになります。HTTPSアクセスするプログラムであればC/C++はもちろん、他のプログラミング言語であっても問題なく書けることでしょう。</p>\n\n<h2 id=\"データを取得する場合\">データを取得する場合</h2>\n\n<p>データ登録ではなくデータを取得する場合、以下の二つがよくある処理です。</p>\n\n<ol>\n<li>デバイスのメタデータをNCMBに保存しておき、定期的に取得する</li>\n<li>直近○件のデータを取得する</li>\n</ol>\n\n\n<p>デバイス側で頻繁なネットワークアクセスは避けるはずなので、多くは1の使い方になるでしょう。これは例えばTwilio Syncであったり、AWS Device Shadowのような使い方になります。この場合、自分（デバイス）のメタデータが入っているデータのObjectIdが分かっていれば問題ありません。この場合もタイムスタンプが固定されれば、署名も同じものが使えます。</p>\n\n<p>これもプログラム中に固定値として定義すれば定期的にデータを取得して、データが変わっていれば動作を変更すると言った仕組みが作れます。</p>\n\n<h2 id=\"ファイルストアにはHTTPSでアクセスする\">ファイルストアにはHTTPSでアクセスする</h2>\n\n<p>デバイスのファームウェア、プログラムをバージョンアップする場合、リモートに多数あるデバイスを手作業でアップデートする訳にはいきません。まずデバイスのメタデータが入ったデータストアに更新命令を書き込みます（updateカラムをtrueにするなど）。</p>\n\n<p>そのデータを受け取ったデバイスでは新しいプログラムを受け取りますが、その際にはファイルストアのHTTPSアクセスがお勧めです。この場合はURLさえ分かっていれば署名はいりません。ただのHTTPSアクセスでファイルを取得し、その内容を展開できます。</p>\n\n<h2 id=\"データを更新する\">データを更新する</h2>\n\n<p>アップデート後、デバイスから更新完了した旨書き込みを行います。つまり、データストアを更新する必要があります。この場合、ObjectIdが分かっているデータの更新であれば、データの登録や取得と同じように同じ署名が利用できます。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>IoTプロジェクトでは巨大なSDKをインストールするのは現実的でない場合もあるでしょう。利用する機能がデータストアくらいであれば署名をあらかじめ生成しておくことで対応できます。署名生成アルゴリズムを実装しなくともNCMBを使えますので、ぜひお試しください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "ニフクラ mobile backendはmBaaS（mobile Backend As a Service）として知られていますが、IoT分野においても多数利用されています。デバイス側の開発も必要なIoTにおいて、サーバサイドの開発をmBaaSに委ねられるのは開発工数を減らす上でもお勧めです。 そこで今回はNCMBをIoTにおいて利用する際のテクニックを幾つかご紹介します。",
        "date_published": "2019-11-08T00:55:42.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613442698944",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/29/140240?utm_source=feed",
        "title": "スマートフォンで使える決済方法について",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930142028.png\" alt=\"f:id:mbaasdevrel:20190930142028p:plain\" title=\"f:id:mbaasdevrel:20190930142028p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>○○Payという単語が多数飛び交うようになって、アプリの中での決済手段が多彩になっています。実際、あまりにも多くて何が使えるのか、どれが有効なのか分からないという方も多いのではないでしょうか。</p>\n\n<p>そこで、スマートフォンの中で使える決済手段をカテゴリ別に紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#クレジットカード\">クレジットカード</a></li>\n    <li><a href=\"#QRコード決済\">QRコード決済</a></li>\n    <li><a href=\"#Apple-PayGoogle-Pay\">Apple Pay/Google Pay</a></li>\n    <li><a href=\"#電子マネー\">電子マネー</a></li>\n    <li><a href=\"#Square\">Square</a></li>\n    <li><a href=\"#電子ウォレット\">電子ウォレット</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"クレジットカード\">クレジットカード</h2>\n\n<p>まずはベーシックなクレジットカード決済です。Amazonや楽天のように独自の決済機能を提供するものもあれば、Stripeのような決済ASPを使う場合もあります。トランザクション数によりますが、2.2〜3.5%程度の決済手数料がかかります。</p>\n\n<p>決済ASPを用いない場合、自分で各ブランド（マスターやJCBなど）と契約しなければなりません。ただし最近ではPCI DSSというセキュリティに関する国際基準を準拠することが求められおり、自社独自の決済システムを構築するメリットは薄れています。ASPを利用する方が手軽、かつセキュアに運用できるでしょう。</p>\n\n<p>アプリの中で用いる場合、iOSでは物販や特定分野でしか使えません。</p>\n\n<h2 id=\"QRコード決済\">QRコード決済</h2>\n\n<p>最近伸びているのがQRコード決済です。クレジットカード会社を通すと手数料が高いため、自社内にお金をプールし、ユーザ間で送金できるようにしたり、プールした金額の中で決済を行えるようにします。</p>\n\n<p>購入する金額によって異なるQRコードが表示されるタイプと、常に固定のQRコードを読み込んで決済する金額を入力するものとかがあります。固定の方が手軽にはじめられますが、都度購入完了画面を店舗側に見せないといけません。</p>\n\n<p>主にリアル店舗での物販に用いられることが多く、インターネット上で見かけることは殆どありません。</p>\n\n<h2 id=\"Apple-PayGoogle-Pay\">Apple Pay/Google Pay</h2>\n\n<p>iOSやAndroidに搭載されているカード保存機能によって実現している決済手段です。Webサイトやアプリ内課金、リアル店舗と幅広く利用できます。開発者にもインタフェースが公開されており、アプリ内課金やWebサイトの決済に利用できます。</p>\n\n<p>カード情報がそのままスマートフォンに残っている訳ではなく、繰り返し使える認証コードが保存されています。AppleはSafari、AndroidはGoogle Chromeとの親和性も高く、シームレスに利用できます。</p>\n\n<h2 id=\"電子マネー\">電子マネー</h2>\n\n<p>SuicaやiDなどのNFCを用いた電子マネーはApple PayやGoogle Payの中で利用できます。電子マネーはチャージ式であり、クレジットカードのように紛失や盗難によって被害を受けた場合には金額はチャージしていた額以上にはなりません。その点が安全性が高い仕組みと言えるでしょう。</p>\n\n<p>アプリの中で決済に用いることはできませんが、iOS13以降のiOSデバイス、AndroidではNFCを用いてSuicaや免許証のデータが読み取れるようになっています。今後、その利用範囲が広がっていくことでしょう。</p>\n\n<h2 id=\"Square\">Square</h2>\n\n<p>リアル店舗での決済に利用できるSquareリーダーを提供しています。購入者はユーザ登録不要で、クレジットカードを用いた決済が可能です。QRコードもリアル店舗での決済を増やしたいと考えているようですが、ユーザ登録が必要なことやチャージが必須なために面倒な印象があります。Squareはすでに持っているクレジットカードが使えるのが魅力でしょう。</p>\n\n<p>Squareは決済だけを提供するので電子マネーや電子ウォレットのような仕組みはありません。決済機能はSDKとしてアプリ内に組み込み可能です。</p>\n\n<h2 id=\"電子ウォレット\">電子ウォレット</h2>\n\n<p>PayPalのようなサービスは電子ウォレットを提供しています。メルペイのように自社サービス内に蓄積されているお金を実際に決済に利用できる仕組みです。この場合、現金化せずに利用できるので、サービス提供側としてはデータベースの値を書き換えるだけで済みます（手数料がかかりません）。PayPalも同様です。</p>\n\n<p>C2Cのように販売側と購入側が混在する（販売側が購入側になることがあったり、その逆もある）場合、電子ウォレットによる決済代行が有効です。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>アプリにおいては現金決済が使えない以上、他の決済手段を検討しなければなりません。OS自体が提供するものを使うのが最も安全（突然締め出される可能性がない）ですが、手数料が高い（30%、継続の場合2年目から15%）のが問題視されています。そのためQRコード決済や回避手段が用いられています。NetflixやSpotify、Amazon Kindleなどはアプリ内課金を提供していません。</p>\n\n<p>決済手段は多様ですが、それぞれに特徴や制限があります。皆さんのアプリに合わせて最適なものを選択してください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "○○Payという単語が多数飛び交うようになって、アプリの中での決済手段が多彩になっています。実際、あまりにも多くて何が使えるのか、どれが有効なのか分からないという方も多いのではないでしょうか。 そこで、スマートフォンの中で使える決済手段をカテゴリ別に紹介します。",
        "date_published": "2019-10-29T05:02:40.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613454356691",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/29/120032?utm_source=feed",
        "title": "「平塚市のグルメをリトアニアの皆さんにも楽しんでもらいたい」 - Hiratsuka Maistas mBaaS導入インタビュー",
        "content_html": "<p>今回は、ニフクラ mobile backendをMonacaを組み合わせたアプリ<a href=\"https://play.google.com/store/apps/details?id=com.hiratsuka&hl=ja\">『Hiratsuka Maistas（マイスタス）』</a>を開発し、LODチャレンジ2018にて「学生奨励賞」を受賞された、静岡県立島田商業高等学校の皆様にインタビューさせていただきました！</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasblog/20191023/20191023192548.png\" alt=\"f:id:mbaasblog:20191023192548p:plain\" title=\"f:id:mbaasblog:20191023192548p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#今回ご紹介するアプリはこちら\">今回ご紹介するアプリはこちら！</a></li>\n    <li><a href=\"#インタビュー\">インタビュー</a></li>\n    <li><a href=\"#さいごに\">さいごに</a></li>\n</ul>\n\n<h2 id=\"今回ご紹介するアプリはこちら\">今回ご紹介するアプリはこちら！</h2>\n\n<p><a href=\"https://play.google.com/store/apps/details?id=com.hiratsuka&hl=ja\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasblog/20191023/20191023164050.png\" /><br>『Hiratsuka Maistas（マイスタス）』</a></p>\n\n<h2 id=\"インタビュー\">インタビュー</h2>\n\n<p>ーー<b>まずはおめでとうございます！ 今回受賞となった『Hiratsuka Maistas』はどういったアプリなのか、ご紹介をお願いします。</b></p>\n\n<p>『Hiratsuka Maistas』は、平塚市を訪れたリトアニア人に向けて、リトアニア語で平塚市内の飲食店を紹介するアプリです。</p>\n\n<p>自分自身、修学旅行に行ったとき、旅行先でおいしいご飯屋さんを探すのに苦労した経験があるんです。知らない土地のグルメをうまく発掘するのは、なかなか難しいですよね。\nまた、厚生労働省のデータを見たところ、平塚市は「食事」へ使うお金の割合が比較的高い地域でもあります。そんな平塚市のグルメをリトアニアの皆さんにも楽しんでいただきたいなと思って開発しました。</p>\n\n<p>Monacaとニフクラ mobile backendを用いて開発しています。</p>\n\n<p>ーー<b>リトアニア語ですか！ なぜリトアニアに着目したのか、背景を教えていただいてもいいですか？</b></p>\n\n<p>平塚市は、2020年に開催される東京オリンピックにおいてリトアニア共和国のホストタウンに選ばれています。\nリトアニアからはるばるいらっしゃる皆さんも、きっと平塚市内でご飯屋さんを探すと思います。その時に、お役に立てたらいいなと思いました。</p>\n\n<p>アクセスのいい駅周辺の150店舗を中心に、グルメ紹介できるアプリとして開発を進めました。</p>\n\n<p>ーー<b>リトアニアの人にも、是非日本食・平塚のグルメを楽しんで欲しいですよね。いちばん苦労したことはなんですか？</b></p>\n\n<p>一番最初の企画出しが、一番大変でした。\n「食事」というテーマに着目するまでに、結構時間がかかったんです。テーマを発見したあとも、ではなぜ「食事」にフォーカスするのか、というところの芯作りをしっかり行わなくてはあとでぶれてしまうと思ったので、とくに力を入れました。\n最初に自分たちの信念を作り上げたおかげで、ブレなく開発ができ、最終的に賞をいただけるようなアプリになったと考えています。</p>\n\n<p>ーー<b>開発中には、ニフクラ mobile backendをご利用いただいたんですよね。具体的に利用している機能を教えていただけますか？</b></p>\n\n<p>「データストア」を、お店情報の保存に使っています。クラウド管理しているので、あとから更新も可能です。</p>\n\n<p>サンプルコードを見て、データの整形や出力をして……というのが、慣れない作業だったので大変でした。\n今までは教科書に沿って、本のコードをそのまま写していましたが、自分で１から書いて形に残るアプリを作ることができたのはとてもよかったです。</p>\n\n<p>ーー<b>一番こだわったポイントを教えていただけますか？</b></p>\n\n<p>正方形の丸デザインにこだわりました！\nレスポンシブに対応するために角丸にしました。デザインも納得のいくものになったと思います。</p>\n\n<p>ーー<b>たしかに、見た目もきれいなアプリですよね。今後もアプリを作っていきたいと思いますか？</b></p>\n\n<p>思います。使ってくれる人のためにアプリやサービスは存在するので、もっともっと人の役に立つアプリを作っていきたいです。</p>\n\n<p>今回は食事×リトアニアの組み合わせでしたが、食事以外の面でも、リトアニアの方以外にも、外国人にむけていろんなアプリを作っていきたいです。たとえば日本文化の紹介アプリとかもいいと思います。</p>\n\n<p>東京オリンピックも来年に迫っているので、日本に来てくれるたくさんの外国の方が、日本で楽しんでいただけるよういろんな場面で助けられるアプリが作りたいと思っています。</p>\n\n<p>ーー<b>素晴らしいですね。ぜひ次回作にもニフクラ mobile backendをご利用いただけたら嬉しいです！</b></p>\n\n<h2 id=\"さいごに\">さいごに</h2>\n\n<p>気づけば2020年まで残り僅か！　観光用アプリも、来年にかけて盛り上がっていきそうですね。\nニフクラ mobile backendで開発されたアプリがあれば、ぜひブログでご紹介いたしますのでご連絡ください。</p>\n\n<p>また、ニフクラ mobile backendでは、１から学べる参考書<a href=\"https://mbaas.nifcloud.com/education/index.htm\">「Monacaとニフクラ mobile backend で学ぶ はじめてのプログラミング ～クラウド連携アプリ開発編～」</a>もご提供しております。教育機関限定にて1冊献本もお申込みいただけますので、どうぞご活用ください！</p>\n\n<p>なお、本件に関する静岡県立島田商業高等学校側のご担当者は鈴木 滋先生となります。<br/>\n島田商業高等学校に対してのお問い合わせは、鈴木先生までよろしくお願いいたします。</p>\n\n<p><a href=\"https://mbaas.nifcloud.com/education/index.htm\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasblog/20191023/20191023170056.png\"></a></p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n    <img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasblog/20180123/20180123152854.jpg?1516688993\">\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">佐々木 大樹</p>\n    <p class=\"c-txt-basic p-author__info\">\n      mobile backendの企画／営業を担当しております。<br>\n      ガジェットとスマホアプリがすき。\n    </p>\n  </div>\n</div>",
        "summary": "今回は、ニフクラ mobile backendをMonacaを組み合わせたアプリ『Hiratsuka Maistas（マイスタス）』を開発し、LODチャレンジ2018にて「学生奨励賞」を受賞された、静岡県立島田商業高等学校の皆様にインタビューさせていただきました！",
        "date_published": "2019-10-29T03:00:32.000Z",
        "author": {
          "name": "mbaasblog"
        }
      },
      {
        "key": "hatenablog://entry/26006613453202809",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/21/153549?utm_source=feed",
        "title": "Rubyでのスクリプト開発のベースを作成しました",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20180418/20180418153723.png\" alt=\"f:id:mbaasdevrel:20180418153723p:plain\" title=\"f:id:mbaasdevrel:20180418153723p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>NCMBのスクリプト機能はNode.jsとRubyに対応しています。スクリプトはファイルをクラウド上にアップロードして使うのですが、手元の環境とクラウドでの環境が異なるために、手元では動いたのにクラウド向けに編集したり、うまく動かなくなったりします。これは相当ストレスです。</p>\n\n<p>個人的にRubyで開発している時にクラウド上にファイルをアップロードしてテスト実行する度にトラブったので、開発用に<a href=\"https://github.com/NCMBMania/ruby-script-base\">NCMBMania/ruby-script-base</a>を作りました。皆さんのスクリプト開発に役立ててください。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#使い方\">使い方</a></li>\n    <li><a href=\"#テスト\">テスト</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"使い方\">使い方</h2>\n\n<p><a href=\"https://github.com/NCMBMania/ruby-script-base\">NCMBMania/ruby-script-base</a>をZipダウンロード、解凍します。</p>\n\n<p><a href=\"https://github.com/NCMBMania/ruby-script-base/archive/master.zip\">Zipダウンロード</a></p>\n\n<p>解凍した中にscript.rbというファイルがあります。ここにスクリプトのコードを記述します。初期内容は次のようになっています。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">require</span> <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">rack</span><span class=\"synSpecial\">&quot;</span>\n<span class=\"synPreProc\">require</span> <span class=\"synSpecial\">'</span><span class=\"synConstant\">json</span><span class=\"synSpecial\">'</span>\n\n<span class=\"synPreProc\">def</span> <span class=\"synIdentifier\">call</span>(env)\n  req = <span class=\"synType\">Rack</span>::<span class=\"synType\">Request</span>.new(env)\n  name = req.params[<span class=\"synSpecial\">'</span><span class=\"synConstant\">name</span><span class=\"synSpecial\">'</span>] || <span class=\"synSpecial\">'</span><span class=\"synConstant\">Default</span><span class=\"synSpecial\">'</span>\n  [<span class=\"synConstant\">200</span>, {<span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">Content-Type</span><span class=\"synSpecial\">&quot;</span> =&gt; <span class=\"synSpecial\">&quot;</span><span class=\"synConstant\">application/json</span><span class=\"synSpecial\">&quot;</span>}, [{\n    <span class=\"synConstant\">name</span>: name\n  }.to_json]\n  ]\n<span class=\"synPreProc\">end</span>\n</pre>\n\n\n<p>req.paramsでGET/POSTで送られてくるパラメータの内容が取得できます。また、Rubyオブジェクトをto_jsonで出力することでレスポンスをJSONにできます。</p>\n\n<p>この内容は自由に変更してもらって大丈夫です。</p>\n\n<h2 id=\"テスト\">テスト</h2>\n\n<p>開発が終わったらテストしてみます。まず必要なライブラリをインストールします。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bundle install</pre>\n\n\n<p>終わったらサーバを立ち上げます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ bundle exec rackup</pre>\n\n\n<p>サーバが立ち上がったら <code>http://localhost:9292</code> でスクリプトのコードがテストできます。GETであればそのままWebブラウザからアクセスすれば良いでしょう。POST/PUT/DELETEメソッドの場合はcurlを使うのがお勧めです。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>後からRackアプリケーション化したり、その必要なコードを準備するのは意外と面倒です。<a href=\"https://github.com/NCMBMania/ruby-script-base\">NCMBMania/ruby-script-base</a>を使って手軽に開発をはじめてください。スクリプトは無料プランでも月50,000回まで利用できます。</p>\n\n<p>スクリプトの使い方については<a href=\"https://mbaas.nifcloud.com/doc/current/script/basic_usage_ios.html\">スクリプト (iOS) : 基本的な使い方 | ニフクラ mobile backend</a>を参考にしてください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "NCMBのスクリプト機能はNode.jsとRubyに対応しています。スクリプトはファイルをクラウド上にアップロードして使うのですが、手元の環境とクラウドでの環境が異なるために、手元では動いたのにクラウド向けに編集したり、うまく動かなくなったりします。これは相当ストレスです。 個人的にRubyで開発している時にクラウド上にファイルをアップロードしてテスト実行する度にトラブったので、開発用にNCMBMania/ruby-script-baseを作りました。皆さんのスクリプト開発に役立ててください。",
        "date_published": "2019-10-21T06:35:49.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613453203245",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/21/153515?utm_source=feed",
        "title": "Node.jsでのスクリプト開発のベースを作成しました",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171212/20171212211252.png\" alt=\"f:id:mbaasdevrel:20171212211252p:plain\" title=\"f:id:mbaasdevrel:20171212211252p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>NCMBのスクリプト機能はNode.jsとRubyに対応しています。スクリプトはファイルをクラウド上にアップロードして使うのですが、手元の環境とクラウドでの環境が異なるために、手元では動いたのにクラウド向けに編集したり、うまく動かなくなったりします。これは相当ストレスです。</p>\n\n<p>個人的にRubyで開発している時にクラウド上にファイルをアップロードしてテスト実行する度にトラブったので、開発用に<a href=\"https://github.com/NCMBMania/ruby-script-base\">NCMBMania/ruby-script-base</a>を作りました。そして同じ仕組みをNode.jsでも作りました。それが<a href=\"https://github.com/NCMBMania/node-script-dev-env\">NCMBMania/node-script-dev-env</a>で、使い方を解説します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#使い方\">使い方</a></li>\n    <li><a href=\"#テスト\">テスト</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"使い方\">使い方</h2>\n\n<p><a href=\"https://github.com/NCMBMania/node-script-dev-env\">NCMBMania/node-script-dev-env</a>をZipダウンロード、解凍します。</p>\n\n<p><a href=\"https://github.com/NCMBMania/node-script-dev-env/master.zip\">Zipダウンロード</a></p>\n\n<p>解凍した中にscript.jsというファイルがあります。ここにスクリプトのコードを記述します。初期内容は次のようになっています。</p>\n\n<pre class=\"code lang-ruby\" data-lang=\"ruby\" data-unlink><span class=\"synPreProc\">module</span>.exports = function(req, res) {\n  <span class=\"synStatement\">if</span> (req.query.name) {\n    res.send(<span class=\"synSpecial\">'</span><span class=\"synConstant\">Hello,</span><span class=\"synSpecial\">'</span> + req.query.name);\n  } <span class=\"synStatement\">else</span> {\n    res.send(<span class=\"synSpecial\">'</span><span class=\"synConstant\">Hello</span><span class=\"synSpecial\">'</span>);\n  }\n}\n</pre>\n\n\n<p>req.queryでGETで送られてくるパラメータの内容が取得できます。POSTの場合はreq.bodyになります。この内容は自由に変更してスクリプト開発を行ってください。</p>\n\n<h2 id=\"テスト\">テスト</h2>\n\n<p>開発が終わったらテストしてみます。まず必要なライブラリをインストールします。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ npm install</pre>\n\n\n<p>終わったらサーバを立ち上げます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ npm run start</pre>\n\n\n<p>サーバが立ち上がったら <code>http://localhost:3000</code> でスクリプトのコードがテストできます。GETであればそのままWebブラウザからアクセスすれば良いでしょう。POST/PUT/DELETEメソッドの場合はcurlを使うのがお勧めです。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>後からExpressに組み込んだり、その必要なコードを準備するのは意外と面倒です。<a href=\"https://github.com/NCMBMania/node-script-dev-env\">NCMBMania/node-script-dev-env</a>を使って手軽に開発をはじめてください。スクリプトは無料プランでも月50,000回まで利用できます。</p>\n\n<p>スクリプトの使い方については<a href=\"https://mbaas.nifcloud.com/doc/current/script/basic_usage_ios.html\">スクリプト (iOS) : 基本的な使い方 | ニフクラ mobile backend</a>を参考にしてください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "NCMBのスクリプト機能はNode.jsとRubyに対応しています。スクリプトはファイルをクラウド上にアップロードして使うのですが、手元の環境とクラウドでの環境が異なるために、手元では動いたのにクラウド向けに編集したり、うまく動かなくなったりします。これは相当ストレスです。 個人的にRubyで開発している時にクラウド上にファイルをアップロードしてテスト実行する度にトラブったので、開発用にNCMBMania/ruby-script-baseを作りました。そして同じ仕組みをNode.jsでも作りました。それがNCMBMania/node-script-dev-envで、使い方を解説します。",
        "date_published": "2019-10-21T06:35:15.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613442721513",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/18/153404?utm_source=feed",
        "title": "PWAの実例が知りたい時にチェックしたいサイトまとめ",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930150854.png\" alt=\"f:id:mbaasdevrel:20190930150854p:plain\" title=\"f:id:mbaasdevrel:20190930150854p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>PWA（Progressive Web Apps）という名前は聞いても、実際のところ、どこで使われているのかは分かりづらいです。アプリのように配布してくれる場所がある訳ではありません。</p>\n\n<p>そこでPWAの実例をまとめてくれているサイトを紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#PWA-Directory\">PWA Directory</a></li>\n    <li><a href=\"#A-selection-of-Progressive-Web-Apps\">A selection of Progressive Web Apps</a></li>\n    <li><a href=\"#PWA対応サイトの共有サービス---Favorite-PWA\">PWA対応サイトの共有サービス - Favorite PWA</a></li>\n    <li><a href=\"#PWA-Stats\">PWA Stats</a></li>\n    <li><a href=\"#Progressive-Web-App-Room---The-best-examples-of-pwa\">Progressive Web App Room - The best examples of pwa</a></li>\n    <li><a href=\"#Appscope---Progressive-Web-Apps-Examples\">Appscope - Progressive Web Apps Examples</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h3 id=\"PWA-Directory\"><a href=\"https://pwa-directory.appspot.com/\">PWA Directory</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930150838.png\" alt=\"f:id:mbaasdevrel:20190930150838p:plain\" title=\"f:id:mbaasdevrel:20190930150838p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>6500以上のPWAサイトが登録されています。しかしユーザが自由に登録できる仕組みなので、かなりダブりもあるようです（日経新聞は4つありました）。それでも世界中のPWAサイトが多数確認できます。</p>\n\n<p><a href=\"https://pwa-directory.appspot.com/\">PWA Directory</a></p>\n\n<h3 id=\"A-selection-of-Progressive-Web-Apps\"><a href=\"https://pwa.rocks/\">A selection of Progressive Web Apps</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930150854.png\" alt=\"f:id:mbaasdevrel:20190930150854p:plain\" title=\"f:id:mbaasdevrel:20190930150854p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>カテゴリに分かれてPWAの実例が並んでいます。英語圏のもののみで、日本語のサイトは登録されていませんでした。GitHubリポジトリで管理されており、Pull Requestを通じて登録申請が可能です。</p>\n\n<p><a href=\"https://pwa.rocks/\">A selection of Progressive Web Apps</a></p>\n\n<h3 id=\"PWA対応サイトの共有サービス---Favorite-PWA\"><a href=\"https://favorite-pwa.com/\">PWA対応サイトの共有サービス - Favorite PWA</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930150902.png\" alt=\"f:id:mbaasdevrel:20190930150902p:plain\" title=\"f:id:mbaasdevrel:20190930150902p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>日本語のサイトです。各種カテゴリに分かれており、ゲームだけ別カラムになっています。ランキングもあり、いいね数によって並び順が決まっています。</p>\n\n<p><a href=\"https://favorite-pwa.com/\">PWA対応サイトの共有サービス - Favorite PWA</a></p>\n\n<h3 id=\"PWA-Stats\"><a href=\"https://www.pwastats.com/\">PWA Stats</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930150911.png\" alt=\"f:id:mbaasdevrel:20190930150911p:plain\" title=\"f:id:mbaasdevrel:20190930150911p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>最新のPWAに関するニュースをまとめています。PWAによる効果などを数値で示してくれているので、PWAアプリとその効果を学ぶのに役立つでしょう。</p>\n\n<p><a href=\"https://www.pwastats.com/\">PWA Stats</a></p>\n\n<h3 id=\"Progressive-Web-App-Room---The-best-examples-of-pwa\"><a href=\"http://progressivewebapproom.com/\">Progressive Web App Room - The best examples of pwa</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930150920.png\" alt=\"f:id:mbaasdevrel:20190930150920p:plain\" title=\"f:id:mbaasdevrel:20190930150920p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>カテゴリごとに実例がアイコンで並んでいます。英語圏のもののみのようです。アプリストアのように詳細な説明とスクリーンショットも掲載されています。</p>\n\n<p><a href=\"http://progressivewebapproom.com/\">Progressive Web App Room - The best examples of pwa</a></p>\n\n<h3 id=\"Appscope---Progressive-Web-Apps-Examples\"><a href=\"https://appsco.pe/\">Appscope - Progressive Web Apps Examples</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190930/20190930150928.png\" alt=\"f:id:mbaasdevrel:20190930150928p:plain\" title=\"f:id:mbaasdevrel:20190930150928p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>カテゴリと大きなキャプションと、まるでアプリストアのような表示になっています。ここで並んでいるアプリを見るだけでPWAがどれだけ多くのサイトで使われているかが分かるでしょう。</p>\n\n<p><a href=\"https://appsco.pe/\">Appscope - Progressive Web Apps Examples</a></p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>PWAに対応したサイトは日々増えています。アプリの次のトレンドとして注目されているだけに、早く学んで実践していく必要があるでしょう。上司を説得する材料としても使えそうです。</p>\n\n<p>PWAでバックエンドが必要になったら、ぜひニフクラ mobile backendをご利用ください！</p>\n\n<p><a href=\"https://mbaas.nifcloud.com/\">mBaaSでサーバー開発不要！ | ニフクラ mobile backend</a></p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "PWA（Progressive Web Apps）という名前は聞いても、実際のところ、どこで使われているのかは分かりづらいです。アプリのように配布してくれる場所がある訳ではありません。 そこでPWAの実例をまとめてくれているサイトを紹介します。",
        "date_published": "2019-10-18T06:34:04.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613443198360",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/18/152704?utm_source=feed",
        "title": "技術書典7に出展しました",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasblog/20191004/20191004175938.png\" alt=\"f:id:mbaasblog:20191004175938p:plain\" title=\"f:id:mbaasblog:20191004175938p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>技術書の同人誌会、技術書典7にニフクラ mobile backendの有志メンバーで出展しました。ニフクラ mobile backendが開始してからちょうど6年経過したとあって、その思いを一冊の書籍にしています。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#書籍概要\">書籍概要</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasblog/20191004/20191004175938.png\" alt=\"f:id:mbaasblog:20191004175938p:plain\" title=\"f:id:mbaasblog:20191004175938p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p><a href=\"https://booth.pm/ja/items/1574099\">mobile backendを語りたい～中の人たちの6周年記念号～ - ニフクラ mobile backend - BOOTH</a></p>\n\n<p>当日はMonacaとニフクラ mobile backendを組み合わせた教科書的な書籍についても頒布していました（<a href=\"https://mbaas.nifcloud.com/education/index.htm\">プログラミング教育 | ニフクラ mobile backend</a>にて販売しています）。</p>\n\n<p>mobile backendを語りたいについては、中の人たちの思い入れがとても強く、ほぼ趣味的な書籍となっています（だからこそ同人誌なのですが）。この6年間の思いが詰まった書籍となっていますので、ぜひ気になる方はBOOTHにてご購入ください。</p>\n\n<p><a href=\"https://booth.pm/ja/items/1574099\">mobile backendを語りたい～中の人たちの6周年記念号～ - ニフクラ mobile backend - BOOTH</a></p>\n\n<p>※2019年10月現在、Boothにて販売中（限定販売となります）</p>\n\n<h2 id=\"書籍概要\">書籍概要</h2>\n\n<p>2013年に産声をあげてから早6年。此度、国産mBaaS「ニフクラ mobile backend」のなかの人有志で、6周年記念号を刊行することといたしました。アプリプラットフォームの裏側、表側、有効的な使い方、気を付けて欲しいこと、などなど書きしたためましたのでどうぞお楽しみください。</p>\n\n<p><strong>＜ピックアップ記事＞</strong></p>\n\n<ul>\n<li>ニフクラ mobile backend をSwiftUIで使ってみる</li>\n<li>Unity SDK Tips集</li>\n<li>1万PVからはじめるクラウドサービス</li>\n</ul>\n\n\n<p>その他、mobile backendを活用した結婚式の余興ゲーム、リリース当時の裏話、などなど興味深い記事がもりだくさん！\nおかげさまで30,000ユーザー60,000アプリに利用される国産最大級mBaaS「ニフクラ mobile backend」を、これからも、どうぞどうぞ宜しくお願い致します。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>筆者はSDK作りから学ぶmobile backendの面白さという記事を書いています。もしご購入の際には、ぜひ読んでみてください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "技術書の同人誌会、技術書典7にニフクラ mobile backendの有志メンバーで出展しました。ニフクラ mobile backendが開始してからちょうど6年経過したとあって、その思いを一冊の書籍にしています。",
        "date_published": "2019-10-18T06:27:04.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613441955083",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/11/131349?utm_source=feed",
        "title": "アプリの安全な運用に。監視サービスまとめ",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002904.png\" alt=\"f:id:mbaasdevrel:20190929002904p:plain\" title=\"f:id:mbaasdevrel:20190929002904p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>最近のアプリはクラウドサービスが必須となっています。ネットワークを伴わないアプリは殆どないのではないでしょうか。しかしサーバを使うと気になるのが突然のレスポンス低下であったりサーバの停止です。</p>\n\n<p>そこで使えるのが監視サービスです。自分で監視サーバを立てることもできますが、今回はより手軽に使えるクラウドベースの監視サービスを紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#Site24x7\">Site24x7</a></li>\n    <li><a href=\"#SAMS\">SAMS</a></li>\n    <li><a href=\"#Mackerelマカレル\">Mackerel（マカレル）</a></li>\n    <li><a href=\"#Pingdom\">Pingdom</a></li>\n    <li><a href=\"#New-Relic\">New Relic</a></li>\n    <li><a href=\"#Free-Website-Uptime-Monitor\">Free Website Uptime Monitor</a></li>\n    <li><a href=\"#StatusCake\">StatusCake</a></li>\n    <li><a href=\"#SavaMoniサバモニ\">SavaMoni.（サバモニ）</a></li>\n    <li><a href=\"#application-performance-monitoring--Datadog\">application performance monitoring | Datadog</a></li>\n    <li><a href=\"#Amazon-CloudWatch\">Amazon CloudWatch</a></li>\n    <li><a href=\"#OpManager\">OpManager</a></li>\n    <li><a href=\"#パトロールクラリスPATROLCLARICE\">パトロールクラリス｜PATROLCLARICE</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h3 id=\"Site24x7\"><a href=\"https://www.site24x7.jp/\">Site24x7</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002755.png\" alt=\"f:id:mbaasdevrel:20190929002755p:plain\" title=\"f:id:mbaasdevrel:20190929002755p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>世界中から指定したWebサイトにアクセスしてレスポンスを測定できます。ユーザ操作をシナリオ登録して、実行もできます。サーバやDocker、VMWare、AWSなどの監視にも対応しています。</p>\n\n<p><a href=\"https://www.site24x7.jp/\">クラウド型Webサイト監視・サーバー監視ツール：Site24x7</a></p>\n\n<h3 id=\"SAMS\"><a href=\"https://system-answer.com/service/sams/\">SAMS</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002806.png\" alt=\"f:id:mbaasdevrel:20190929002806p:plain\" title=\"f:id:mbaasdevrel:20190929002806p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>24時間365日の監視に加えて、復旧支援も含まれています。プランによって監視レベルが異なります。</p>\n\n<p><a href=\"https://system-answer.com/service/sams/\">SAMS – IBC Solution</a></p>\n\n<h3 id=\"Mackerelマカレル\"><a href=\"https://mackerel.io/ja/\">Mackerel（マカレル）</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002816.png\" alt=\"f:id:mbaasdevrel:20190929002816p:plain\" title=\"f:id:mbaasdevrel:20190929002816p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>はてな社の提供するサーバ管理、監視サービスです。エージェントをインストールして使います。サーバの監視だけでなく、売上やPVなどのメトリクスを送信して可視化できます。</p>\n\n<p><a href=\"https://mackerel.io/ja/\">Mackerel（マカレル）: 新世代のサーバー管理・監視サービス</a></p>\n\n<h3 id=\"Pingdom\"><a href=\"https://www.pingdom.com/\">Pingdom</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002824.png\" alt=\"f:id:mbaasdevrel:20190929002824p:plain\" title=\"f:id:mbaasdevrel:20190929002824p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>サーバの死活監視、レスポンス、サーバ負荷監視、リアルタイムユーザモニタリングなどが提供されています。Web管理画面にてグラフ化された状態で確認できます。</p>\n\n<p><a href=\"https://www.pingdom.com/\">Website Performance and Availability Monitoring | Pingdom</a></p>\n\n<h3 id=\"New-Relic\"><a href=\"https://newrelic.com/\">New Relic</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002835.png\" alt=\"f:id:mbaasdevrel:20190929002835p:plain\" title=\"f:id:mbaasdevrel:20190929002835p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>アプリケーションレベルでプラグインをインストールしてパフォーマンスを監視できます。230以上のシステムと連携できるようです。</p>\n\n<p><a href=\"https://newrelic.com/\">New Relic | Deliver more perfect software</a></p>\n\n<h3 id=\"Free-Website-Uptime-Monitor\"><a href=\"https://www.gotsitemonitor.com/\">Free Website Uptime Monitor</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002845.png\" alt=\"f:id:mbaasdevrel:20190929002845p:plain\" title=\"f:id:mbaasdevrel:20190929002845p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>世界各国から指定したWebサイトにアクセスして、そのレスポンスをグラフ化します。HTTPの他、IMAPやFTPなども監視対象にできます。</p>\n\n<p><a href=\"https://www.gotsitemonitor.com/\">Website Monitoring • Free Website Uptime Monitor</a></p>\n\n<h3 id=\"StatusCake\"><a href=\"https://www.statuscake.com/\">StatusCake</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002854.png\" alt=\"f:id:mbaasdevrel:20190929002854p:plain\" title=\"f:id:mbaasdevrel:20190929002854p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>サーバの死活監視、エージェントをインストールしたステータス監視、ドメインの失効防止監視、ページスピード、SSL証明書監視、ウィルス監視など様々な監視に対応しています。</p>\n\n<p><a href=\"https://www.statuscake.com/\">Website Monitoring &amp; Downtime Updates | StatusCake</a></p>\n\n<h3 id=\"SavaMoniサバモニ\"><a href=\"https://savamoni.com/\">SavaMoni.（サバモニ）</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002904.png\" alt=\"f:id:mbaasdevrel:20190929002904p:plain\" title=\"f:id:mbaasdevrel:20190929002904p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>指定したサーバへのPingによるポート単位での監視の他、エージェントをインストールしてパフォーマンスをグラフ化できます。エラーが出た場合にはメールやWebhookを呼び出せます。</p>\n\n<p><a href=\"https://savamoni.com/\">無料のサーバー監視ツールならSavaMoni.（サバモニ）</a></p>\n\n<h3 id=\"application-performance-monitoring--Datadog\"><a href=\"https://www.datadoghq.com/apm/\">application performance monitoring | Datadog</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002914.png\" alt=\"f:id:mbaasdevrel:20190929002914p:plain\" title=\"f:id:mbaasdevrel:20190929002914p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>様々なアプリケーション、プログラミング言語に対応した監視エージェントを提供しています。処理ごとのパフォーマンスを計測、可視化します。</p>\n\n<p><a href=\"https://www.datadoghq.com/apm/\">Next-generation application performance monitoring | Datadog</a></p>\n\n<h3 id=\"Amazon-CloudWatch\"><a href=\"https://aws.amazon.com/jp/cloudwatch/\">Amazon CloudWatch</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002922.png\" alt=\"f:id:mbaasdevrel:20190929002922p:plain\" title=\"f:id:mbaasdevrel:20190929002922p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>特にAWSに最適化されたリソース監視サービスです。アプリケーションの監視にも利用できます。AWSの各種サービスとシームレスに連携しているのがお勧めできる点でしょう。</p>\n\n<p><a href=\"https://aws.amazon.com/jp/cloudwatch/\">Amazon CloudWatch（リソースとアプリケーションの監視と管理）| AWS</a></p>\n\n<h3 id=\"OpManager\"><a href=\"https://www.manageengine.jp/products/OpManager/\">OpManager</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002932.png\" alt=\"f:id:mbaasdevrel:20190929002932p:plain\" title=\"f:id:mbaasdevrel:20190929002932p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>マルチベンダー対応のネットワーク監視が可能です。サーバだけでなく、システムサービスやプロトコル、ミドルウェアなどのステータスも監視対象に含められます。</p>\n\n<p><a href=\"https://www.manageengine.jp/products/OpManager/\">ネットワーク統合監視ツールならSNMP対応の「OpManager」- オーピーマネージャー</a></p>\n\n<h3 id=\"パトロールクラリスPATROLCLARICE\"><a href=\"https://patrolclarice.jp/\">パトロールクラリス｜PATROLCLARICE</a></h3>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190929/20190929002943.png\" alt=\"f:id:mbaasdevrel:20190929002943p:plain\" title=\"f:id:mbaasdevrel:20190929002943p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>エージェントレスで使えるサーバ監視、ネットワーク監視サービスです。運用自動化ロボット（RPA）としてパトロールロボコンも提供しています。</p>\n\n<p><a href=\"https://patrolclarice.jp/\">サーバ監視やネットワーク監視の統合監視ソフトウェアならパトロールクラリス｜PATROLCLARICE</a></p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>サーバが突然停止すると、アプリ側にも大きな影響が出ます。監視サービスを使って健全な運用を心がけましょう。また、ニフクラ mobile backendを使うことで、サーバ運用をしないという選択もお勧めです。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "最近のアプリはクラウドサービスが必須となっています。ネットワークを伴わないアプリは殆どないのではないでしょうか。しかしサーバを使うと気になるのが突然のレスポンス低下であったりサーバの停止です。 そこで使えるのが監視サービスです。自分で監視サーバを立てることもできますが、今回はより手軽に使えるクラウドベースの監視サービスを紹介します。",
        "date_published": "2019-10-11T04:13:49.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613443275618",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/04/180959?utm_source=feed",
        "title": "Swift SDKでプッシュ通知を送ってみよう",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20191001/20191001174809.png\" alt=\"f:id:mbaasdevrel:20191001174809p:plain\" title=\"f:id:mbaasdevrel:20191001174809p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>これまでβ版で開発を進めてきたSwift SDKがついに公式リリースされました。mBaaSの一通りの機能に対応しており、もちろんプッシュ通知も送信できます。</p>\n\n<p>今回はこのSwift SDKを使ってプッシュ通知を送ってみます。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#SDKの読み込みについて\">SDKの読み込みについて</a></li>\n    <li><a href=\"#SDKのインポート\">SDKのインポート</a></li>\n    <li><a href=\"#Xcodeでプッシュ通知を追加する\">Xcodeでプッシュ通知を追加する</a></li>\n    <li><a href=\"#SDKの初期化\">SDKの初期化</a></li>\n    <li><a href=\"#プッシュ通知の許可ダイアログを出す\">プッシュ通知の許可ダイアログを出す</a></li>\n    <li><a href=\"#デバイストークンをNCMBに保存する\">デバイストークンをNCMBに保存する</a></li>\n    <li><a href=\"#プッシュ通知を送信する\">プッシュ通知を送信する</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"SDKの読み込みについて\">SDKの読み込みについて</h2>\n\n<p>Swift SDKの読み込み方は3つあります。自分のプロジェクトにあった方法を選択してください。</p>\n\n<ul>\n<li><a href=\"https://mbaas.nifcloud.com/doc/current/introduction/quickstart_swift.html#Carthage%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\">Carthageを利用する方法</a></li>\n<li><a href=\"https://mbaas.nifcloud.com/doc/current/introduction/quickstart_swift.html#CocoaPods%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\">CocoaPodsを利用する方法</a></li>\n<li><a href=\"https://mbaas.nifcloud.com/doc/current/introduction/quickstart_swift.html#SDK%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%97%E3%81%A6%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\">SDKをダウンロードする方法</a></li>\n</ul>\n\n\n<h2 id=\"SDKのインポート\">SDKのインポート</h2>\n\n<p>まずSDKをインポートします。また、UserNotificationsも必要です。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">import</span> UIKit\n<span class=\"synPreProc\">import</span> NCMB  # 追加する\n<span class=\"synPreProc\">import</span> UserNotifications  # 追加する\n</pre>\n\n\n<h2 id=\"Xcodeでプッシュ通知を追加する\">Xcodeでプッシュ通知を追加する</h2>\n\n<p>iOSプロジェクトにプッシュ通知を追加します。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20191001/20191001173656.png\" alt=\"f:id:mbaasdevrel:20191001173656p:plain\" title=\"f:id:mbaasdevrel:20191001173656p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2 id=\"SDKの初期化\">SDKの初期化</h2>\n\n<p>SDKを初期化します。これは <code>didFinishLaunchingWithOptions</code> の中で行うのが良いでしょう。初期化は以下のコードで行えます。 <code>YOUR_APPLICATION_KEY</code> と <code>YOUR_CLIENT_KEY</code> はそれぞれ皆さんの設定と書き換えてください。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>NCMB.initialize(applicationKey<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;YOUR_APPLICATION_KEY&quot;</span>, clientKey<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;YOUR_CLIENT_KEY&quot;</span>);\n</pre>\n\n\n<p><code>didFinishLaunchingWithOptions</code> の中の処理は次のようになります。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">application</span>(_ application<span class=\"synSpecial\">:</span> <span class=\"synType\">UIApplication</span>, didFinishLaunchingWithOptions launchOptions<span class=\"synSpecial\">:</span> <span class=\"synPreProc\">[UIApplication.LaunchOptionsKey: Any]</span>?) <span class=\"synSpecial\">-&gt;</span> <span class=\"synType\">Bool</span> {\n  <span class=\"synComment\">// Override point for customization after application launch.</span>\n  NCMB.initialize(applicationKey<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;b34...01e&quot;</span>, clientKey<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;489...462&quot;</span>);\n  <span class=\"synStatement\">return</span> <span class=\"synConstant\">true</span>\n}\n</pre>\n\n\n<h2 id=\"プッシュ通知の許可ダイアログを出す\">プッシュ通知の許可ダイアログを出す</h2>\n\n<p>次に任意の場所でプッシュ通知の許可ダイアログを表示します。以下のように記述します。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>UNUserNotificationCenter.current().requestAuthorization(options<span class=\"synSpecial\">:</span> <span class=\"synPreProc\">[.alert, .sound, .badge]</span>) { (granted, error) <span class=\"synStatement\">in</span>\n    <span class=\"synStatement\">if</span>((error) <span class=\"synIdentifier\">!=</span> <span class=\"synConstant\">nil</span>) {\n        <span class=\"synStatement\">return</span>\n    }\n    <span class=\"synStatement\">if</span> granted {\n        DispatchQueue.main.async {\n            UIApplication.shared.registerForRemoteNotifications()\n        }\n    }\n}\n</pre>\n\n\n<h2 id=\"デバイストークンをNCMBに保存する\">デバイストークンをNCMBに保存する</h2>\n\n<p>ユーザがプッシュ通知を許可すると <code>didRegisterForRemoteNotificationsWithDeviceToken</code> が呼ばれます。そのトークンを以下のようなコードでNCMBに保存します。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">application</span>(_ application<span class=\"synSpecial\">:</span> <span class=\"synType\">UIApplication</span>, didRegisterForRemoteNotificationsWithDeviceToken deviceToken<span class=\"synSpecial\">:</span> <span class=\"synType\">Data</span>) {\n    <span class=\"synComment\">//端末情報を扱うNCMBInstallationのインスタンスを作成</span>\n    <span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">installation</span> <span class=\"synSpecial\">:</span> <span class=\"synType\">NCMBInstallation</span> <span class=\"synIdentifier\">=</span> NCMBInstallation.currentInstallation\n\n    <span class=\"synComment\">//Device Tokenを設定</span>\n    installation.setDeviceTokenFromData(data<span class=\"synSpecial\">:</span> <span class=\"synType\">deviceToken</span>)\n\n    <span class=\"synComment\">//端末情報をデータストアに登録</span>\n    installation.saveInBackground(callback<span class=\"synSpecial\">:</span> { result <span class=\"synStatement\">in</span>\n        <span class=\"synStatement\">switch</span> result {\n        <span class=\"synStatement\">case</span> .success<span class=\"synSpecial\">:</span>\n            <span class=\"synComment\">//端末情報の登録が成功した場合の処理</span>\n            print(<span class=\"synConstant\">&quot;保存に成功しました&quot;</span>)\n        <span class=\"synStatement\">case</span> <span class=\"synPreProc\">let</span> .failure(error)<span class=\"synSpecial\">:</span>\n            <span class=\"synComment\">//端末情報の登録が失敗した場合の処理</span>\n            print(<span class=\"synConstant\">&quot;保存に失敗しました: </span><span class=\"synSpecial\">\\(error)</span><span class=\"synConstant\">&quot;</span>)\n            <span class=\"synStatement\">return</span>;\n        }\n    })\n}\n</pre>\n\n\n<h2 id=\"プッシュ通知を送信する\">プッシュ通知を送信する</h2>\n\n<p>NCMBのデータストアにデバイストークンが保存されているのが確認できたら、プッシュ通知を送信してみましょう。プッシュ通知を作成して、それが配信されれば完了です。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20191001/20191001174809.png\" alt=\"f:id:mbaasdevrel:20191001174809p:plain\" title=\"f:id:mbaasdevrel:20191001174809p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>プッシュ通知についてはObjective-C、Swiftどちらも操作は殆ど変わりません。コード量も殆ど同じでしょう。ただ、ブリッジヘッダーファイルなどを作成しなくて良い分、Swiftの方が簡単に実装できます。ぜひ皆さんのSwift製アプリの中にプッシュ通知を組み込んでください。</p>\n\n<p><a href=\"https://mbaas.nifcloud.com/doc/current/push/basic_usage_swift.html#/Swift/\">プッシュ通知 (Swift) : 基本的な使い方 | ニフクラ mobile backend</a></p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "これまでβ版で開発を進めてきたSwift SDKがついに公式リリースされました。mBaaSの一通りの機能に対応しており、もちろんプッシュ通知も送信できます。 今回はこのSwift SDKを使ってプッシュ通知を送ってみます。",
        "date_published": "2019-10-04T09:09:59.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613443266459",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/04/180842?utm_source=feed",
        "title": "Swift SDKが正式版になりました！",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20180806/20180806093819.png\" alt=\"f:id:mbaasdevrel:20180806093819p:plain\" title=\"f:id:mbaasdevrel:20180806093819p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>これまでiOS向けにはObjective-CのSDKを提供してきましたが、Swift SDKも追加されました。Objective-Cと使い勝手が大幅に変わるわけではありませんが、Swiftらしい記述ができるようになっています。</p>\n\n<p>まずは基本的な使い方を紹介します。なお、Swiftはバージョンアップによって互換性がなくなることが多い言語でもあります。今回のコードは2019年10月、Swift 5.1での書き方になります。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#SDKの読み込みについて\">SDKの読み込みについて</a></li>\n    <li><a href=\"#SDKのインポート\">SDKのインポート</a></li>\n    <li><a href=\"#SDKの初期化\">SDKの初期化</a></li>\n    <li><a href=\"#試す\">試す</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"SDKの読み込みについて\">SDKの読み込みについて</h2>\n\n<p>Swift SDKの読み込み方は3つあります。自分のプロジェクトにあった方法を選択してください。</p>\n\n<ul>\n<li><a href=\"https://mbaas.nifcloud.com/doc/current/introduction/quickstart_swift.html#Carthage%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\">Carthageを利用する方法</a></li>\n<li><a href=\"https://mbaas.nifcloud.com/doc/current/introduction/quickstart_swift.html#CocoaPods%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\">CocoaPodsを利用する方法</a></li>\n<li><a href=\"https://mbaas.nifcloud.com/doc/current/introduction/quickstart_swift.html#SDK%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%97%E3%81%A6%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95\">SDKをダウンロードする方法</a></li>\n</ul>\n\n\n<h2 id=\"SDKのインポート\">SDKのインポート</h2>\n\n<p>まずSDKをインポートします。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">import</span> UIKit\n<span class=\"synPreProc\">import</span> NCMB # 追加する\n</pre>\n\n\n<h2 id=\"SDKの初期化\">SDKの初期化</h2>\n\n<p>SDKを初期化します。これは <code>didFinishLaunchingWithOptions</code> の中で行うのが良いでしょう。初期化は以下のコードで行えます。 <code>YOUR_APPLICATION_KEY</code> と <code>YOUR_CLIENT_KEY</code> はそれぞれ皆さんの設定と書き換えてください。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink>NCMB.initialize(applicationKey<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;YOUR_APPLICATION_KEY&quot;</span>, clientKey<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;YOUR_CLIENT_KEY&quot;</span>);\n</pre>\n\n\n<p><code>didFinishLaunchingWithOptions</code> の中の処理は次のようになります。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synPreProc\">func</span> <span class=\"synIdentifier\">application</span>(_ application<span class=\"synSpecial\">:</span> <span class=\"synType\">UIApplication</span>, didFinishLaunchingWithOptions launchOptions<span class=\"synSpecial\">:</span> <span class=\"synPreProc\">[UIApplication.LaunchOptionsKey: Any]</span>?) <span class=\"synSpecial\">-&gt;</span> <span class=\"synType\">Bool</span> {\n  <span class=\"synComment\">// Override point for customization after application launch.</span>\n  NCMB.initialize(applicationKey<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;b34...01e&quot;</span>, clientKey<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;489...462&quot;</span>);\n  <span class=\"synStatement\">return</span> <span class=\"synConstant\">true</span>\n}\n</pre>\n\n\n<h2 id=\"試す\">試す</h2>\n\n<p>ではまずはデータストアを試してみます。コードは以下のようになります。</p>\n\n<pre class=\"code lang-swift\" data-lang=\"swift\" data-unlink><span class=\"synComment\">// クラスのNCMBObjectを作成</span>\n<span class=\"synPreProc\">let</span> <span class=\"synIdentifier\">object</span> <span class=\"synSpecial\">:</span> <span class=\"synType\">NCMBObject</span> <span class=\"synIdentifier\">=</span> NCMBObject(className<span class=\"synSpecial\">:</span> <span class=\"synConstant\">&quot;TestClass&quot;</span>)\n<span class=\"synComment\">// オブジェクトに値を設定</span>\nobject[<span class=\"synConstant\">&quot;message&quot;</span>] <span class=\"synIdentifier\">=</span> <span class=\"synConstant\">&quot;こんにちは、Swift!&quot;</span>\n<span class=\"synComment\">// データストアへの登録</span>\nobject.saveInBackground(callback<span class=\"synSpecial\">:</span> { result <span class=\"synStatement\">in</span>\n    <span class=\"synStatement\">switch</span> result {\n    <span class=\"synStatement\">case</span> .success<span class=\"synSpecial\">:</span>\n        <span class=\"synComment\">// 保存に成功した場合の処理</span>\n        print(<span class=\"synConstant\">&quot;保存に成功しました&quot;</span>)\n    <span class=\"synStatement\">case</span> <span class=\"synPreProc\">let</span> .failure(error)<span class=\"synSpecial\">:</span>\n        <span class=\"synComment\">// 保存に失敗した場合の処理</span>\n        print(<span class=\"synConstant\">&quot;保存に失敗しました: </span><span class=\"synSpecial\">\\(error)</span><span class=\"synConstant\">&quot;</span>)\n    }\n})\n</pre>\n\n\n<p>これでデータストアに保存されていればOKです。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>Swift SDKができたことで、モダンな書き方でiOSアプリを開発できるようになりました。ぜひ皆さんのアプリ開発の中でNCMBを活用してください。</p>\n\n<p><a href=\"https://mbaas.nifcloud.com/doc/current/introduction/quickstart_swift.html\">イントロダクション (Swift) : クイックスタート | ニフクラ mobile backend</a></p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "これまでiOS向けにはObjective-CのSDKを提供してきましたが、Swift SDKも追加されました。Objective-Cと使い勝手が大幅に変わるわけではありませんが、Swiftらしい記述ができるようになっています。 まずは基本的な使い方を紹介します。なお、Swiftはバージョンアップによって互換性がなくなることが多い言語でもあります。今回のコードは2019年10月、Swift 5.1での書き方になります。",
        "date_published": "2019-10-04T09:08:42.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613443304430",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/03/194348?utm_source=feed",
        "title": "旧ドメイン（nifty.com）が廃止になりました！",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20191001/20191001191322.png\" alt=\"f:id:mbaasdevrel:20191001191322p:plain\" title=\"f:id:mbaasdevrel:20191001191322p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>あらかじめ予告されていました旧ドメイン廃止が2019年10月01日に実施されました。アプリはWebサーバと違って自分の環境ではないところでエラーになるので、エラーが起きているのが確認しづらいでしょう。</p>\n\n<p>ドメイン廃止によって起こる症状について解説します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#アプリが起動できない\">アプリが起動できない</a></li>\n    <li><a href=\"#データが表示できない\">データが表示できない</a></li>\n    <li><a href=\"#プッシュ通知は配信できる\">プッシュ通知は配信できる</a></li>\n    <li><a href=\"#認証できない\">認証できない</a></li>\n    <li><a href=\"#対策\">対策</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"アプリが起動できない\">アプリが起動できない</h2>\n\n<p>ドメインが廃止されたことで、アプリからmBaaSにアクセスした際に403エラーが返ってきます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ curl https://mb.api.cloud.nifty.com/2013-09-01/classes/food\n{&#34;code&#34;: &#34;E403000&#34;, &#34;error&#34;: &#34;Forbidden.&#34;}</pre>\n\n\n<p>エラー判定を入れていれば何かのエラーであると判断できるでしょう。もしそういった処理を入れていなければアプリが起動できなかったり、落ちてしまう可能性があります。</p>\n\n<h2 id=\"データが表示できない\">データが表示できない</h2>\n\n<p>NCMBにアクセスできなくなりますので、そこに保存されているデータにアクセスできなくなります。登録のみで使っている場合には、登録時にエラーが出てしまうようになるでしょう。</p>\n\n<h2 id=\"プッシュ通知は配信できる\">プッシュ通知は配信できる</h2>\n\n<p>管理画面を使ったプッシュ通知については、これまで通り送信可能です。ただし、アプリからはプッシュ通知を作成できなくなります。</p>\n\n<h2 id=\"認証できない\">認証できない</h2>\n\n<p>会員管理を使っている場合には、認証エラーになってしまいます。セッションの有効期限で自動的に切れてしまいますので、認証エラーになってはじめてドメイン失効に気付くかも知れません。</p>\n\n<h2 id=\"対策\">対策</h2>\n\n<p>SDKを最新版に変更するのがベストですが、SDKのバージョンが上がっているとmBaaSを利用するコードにも影響が出る可能性があります。バージョン2以降のオープンソース版であれば、そのコードを<a href=\"https://github.com/NIFCloud-mbaas/\">NIFCloud-mbaas</a>からダウンロードし、コード中のURLを書き換えて延命する手もあります。（SDKは日々エンハンスされていますので、原則的にはアップグレードすることを推奨します）</p>\n\n<table>\n<thead>\n<tr>\n<th> 旧ドメイン </th>\n<th> 新ドメイン </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> mb.api.cloud.nifty.com </td>\n<td> mbaas.api.nifcloud.com</td>\n</tr>\n<tr>\n<td> script.mb.api.cloud.nifty.com </td>\n<td> script.mbaas.api.nifcloud.com </td>\n</tr>\n</tbody>\n</table>\n\n\n<p>に変更することで、動作は可能です。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>古いSDKのまま放置していると、突然ネットワークアクセスがエラーになっている可能性があります。すでにアクセスはできませんが、アプリのユーザが困っている可能性があります。なるべく早めの対応をお願いします。</p>\n\n<p><a href=\"https://mbaas.nifcloud.com/info/2019/10/post.html\">インフォメーション | ニフクラ mobile backend: 【重要・実施】旧ドメインの廃止について</a></p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "あらかじめ予告されていました旧ドメイン廃止が2019年10月01日に実施されました。アプリはWebサーバと違って自分の環境ではないところでエラーになるので、エラーが起きているのが確認しづらいでしょう。 ドメイン廃止によって起こる症状について解説します。",
        "date_published": "2019-10-03T10:43:48.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613439753765",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/10/01/111446?utm_source=feed",
        "title": "NCMBで利用できるクエリストリングの種類",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190924/20190924090152.png\" alt=\"f:id:mbaasdevrel:20190924090152p:plain\" title=\"f:id:mbaasdevrel:20190924090152p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>mBaaSではデータの取得時にクエリストリングを使ってデータの絞り込みを行います。例えば絞り込み条件であればwhereを使います。ドキュメント「<a href=\"https://mbaas.nifcloud.com/doc/current/rest/common/query.html#%E3%81%9D%E3%81%AE%E4%BB%96%E3%82%AF%E3%82%A8%E3%83%AA%E3%81%AE%E3%82%AD%E3%83%BC%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">REST API リファレンス : クエリの指定方法 | ニフクラ mobile backend</a>」に記載されている他にも複数あるので、この記事で紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#キーの種類\">キーの種類</a></li>\n    <li><a href=\"#count\">count</a></li>\n    <li><a href=\"#include\">include</a></li>\n    <li><a href=\"#limit\">limit</a></li>\n    <li><a href=\"#order\">order</a></li>\n    <li><a href=\"#skip\">skip</a></li>\n    <li><a href=\"#where\">where</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"キーの種類\">キーの種類</h2>\n\n<p>クエリストリングのパラメータは以下があります。なお、この順番は昇順で、署名を作る際の並びになります。</p>\n\n<ul>\n<li>count</li>\n<li>include</li>\n<li>limit</li>\n<li>order</li>\n<li>skip</li>\n<li>where</li>\n</ul>\n\n\n<h2 id=\"count\">count</h2>\n\n<p>データ取得時に指定することで、検索結果の数を取得します。ページネーションで最大何件あるかといった情報を取得する際に使います。</p>\n\n<h2 id=\"include\">include</h2>\n\n<p>ポインターで指定されたクラスのデータも取得する際に指定します。クラス名を文字列で指定します。</p>\n\n<h2 id=\"limit\">limit</h2>\n\n<p>データを何件取得するか指定します。数字で指定し、最大数は1,000となっています。</p>\n\n<h2 id=\"order\">order</h2>\n\n<p>データの並び順を指定します。複数のカラムを指定する場合にはフィールド名を「,（カンマ）」で繋ぎます。基本は昇順ですが、<code>-カラム名</code> とダッシュを頭に付けることで降順にできます。デフォルトはcreateDateの降順です。</p>\n\n<h2 id=\"skip\">skip</h2>\n\n<p>データを何件読み飛ばすか指定します。ページネーションで利用します。</p>\n\n<h2 id=\"where\">where</h2>\n\n<p>データの絞り込み条件を指定します。様々なオペレータが用意されています。</p>\n\n<p><a href=\"https://mbaas.nifcloud.com/doc/current/rest/common/query.html#%E4%BD%BF%E7%94%A8%E5%8F%AF%E8%83%BD%E3%81%AA%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%BF\">REST API リファレンス : クエリの指定方法 | ニフクラ mobile backend</a></p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>クエリストリングはこれが全てです。つまり、これらのパラメータがデータ取得時に指定できます。より効率的なデータストアの使い方を目指して、クエリパラメータを覚えてください。</p>\n\n<p><a href=\"https://mbaas.nifcloud.com/doc/current/rest/common/query.html\">REST API リファレンス : クエリの指定方法 | ニフクラ mobile backend</a></p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "mBaaSではデータの取得時にクエリストリングを使ってデータの絞り込みを行います。例えば絞り込み条件であればwhereを使います。ドキュメント「REST API リファレンス : クエリの指定方法 | ニフクラ mobile backend」に記載されている他にも複数あるので、この記事で紹介します。",
        "date_published": "2019-10-01T02:14:46.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613439752925",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/24/144935?utm_source=feed",
        "title": "CLIでNCMBを操作するncmb.shがデータの登録、更新、削除に対応しました",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190918/20190918162906.png\" alt=\"f:id:mbaasdevrel:20190918162906p:plain\" title=\"f:id:mbaasdevrel:20190918162906p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>CLIで手軽にmBaaSにアクセスできるようにするBashスクリプト<a href=\"https://github.com/NCMBMania/ncmb-sh\">ncmb.sh</a>をバージョンアップして、データの登録、更新そして削除に対応しました。</p>\n\n<p><a href=\"https://github.com/NCMBMania/ncmb-sh\">NCMBMania/ncmb-sh: CLIで使えるNCMB用のコマンドです</a></p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#データの登録\">データの登録</a></li>\n    <li><a href=\"#データの更新\">データの更新</a></li>\n    <li><a href=\"#データの削除\">データの削除</a></li>\n    <li><a href=\"#jqとの組み合わせ\">jqとの組み合わせ</a></li>\n    <li><a href=\"#注意点\">注意点</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<p>その使い方を紹介します。</p>\n\n<h2 id=\"データの登録\">データの登録</h2>\n\n<p>データの登録時には <code>-d</code> を使って登録するデータを指定します。この内容はJSONになります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ ./ncmb.sh -a b34...01e \\\n  -c 489...462 \\\n  -p Example \\\n  -d &#39;{&#34;name&#34;:&#34;test&#34;, &#34;Boolean&#34;: true}&#39; \\\n  -m POST | jq\n{\n  &#34;createDate&#34;: &#34;2019-09-18T08:13:31.548Z&#34;,\n  &#34;objectId&#34;: &#34;9n9tR5pv5vUeeSci&#34;\n}</pre>\n\n\n<h2 id=\"データの更新\">データの更新</h2>\n\n<p>データの更新時には <code>-d</code> に加えて <code>-i</code> でデータのIDを指定します。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ ./ncmb.sh -a b34...01e \\\n  -c 489...462 \\\n  -p Example \\\n  -d &#39;{&#34;name&#34;:&#34;test&#34;, &#34;Boolean&#34;: true}&#39; \\\n  -i 9n9tR5pv5vUeeSci \\\n  -m PUT | jq\n{\n  &#34;updateDate&#34;: &#34;2019-09-18T08:20:11.900Z&#34;\n}</pre>\n\n\n<h2 id=\"データの削除\">データの削除</h2>\n\n<p>データ削除は <code>-i</code> だけ指定します。返却値は何もありません。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ ./ncmb.sh -a b34...01e \\\n  -c 489...462 \\\n  -p Example \\\n  -i 9n9tR5pv5vUeeSci \\\n  -m DELETE</pre>\n\n\n<h2 id=\"jqとの組み合わせ\">jqとの組み合わせ</h2>\n\n<p><a href=\"https://stedolan.github.io/jq/\">jq</a>と組み合わせることで出力結果を見やすく整形できます。</p>\n\n<h2 id=\"注意点\">注意点</h2>\n\n<p>Linux系の各種コマンドを使っていますのでWindowsでは動きません。WSLであれば動くかも知れませんが未検証です。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>コードはわずか80行程度でごく短いものです。これだけのコードでmBaaSにアクセスしてデータのCRUD操作が可能です。どのような仕組みになっているかぜひご覧ください。</p>\n\n<p><a href=\"https://github.com/NCMBMania/ncmb-sh\">NCMBMania/ncmb-sh: CLIで使えるNCMB用のコマンドです</a></p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "CLIで手軽にmBaaSにアクセスできるようにするBashスクリプトncmb.shをバージョンアップして、データの登録、更新そして削除に対応しました。 NCMBMania/ncmb-sh: CLIで使えるNCMB用のコマンドです",
        "date_published": "2019-09-24T05:49:35.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613436077187",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/24/133303?utm_source=feed",
        "title": "CLIでNCMBを利用するncmb.shを作りました",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190918/20190918162906.png\" alt=\"f:id:mbaasdevrel:20190918162906p:plain\" title=\"f:id:mbaasdevrel:20190918162906p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\nBashスクリプトで署名文字列を作る記事を投稿しましたが、その応用として署名文字列を使ってBashスクリプト版のNCMBクライアントを作成しました。</p>\n\n<p><a href=\"https://github.com/NCMBMania/ncmb-sh\">NCMBMania/ncmb-sh: CLIで使えるNCMB用のコマンドです</a></p>\n\n<p>今はデータの取得のみですが、使い方を解説します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#使い方\">使い方</a></li>\n    <li><a href=\"#処理内容\">処理内容</a></li>\n    <li><a href=\"#jqとの組み合わせ\">jqとの組み合わせ</a></li>\n    <li><a href=\"#注意点\">注意点</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"使い方\">使い方</h2>\n\n<p>コマンドは次のように使います。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>./ncmb.sh -a b34...01e \\\n         -c 489...462 \\\n         -w &#39;{&#34;hello&#34;:&#34;ncmb&#34;}&#39; \\\n         -m GET \\\n         -p Example \\\n         -l 100</pre>\n\n\n<p>オプションは以下になります。</p>\n\n<ul>\n<li><strong>-a</strong><br/>\nアプリケーションキー</li>\n<li><strong>-c</strong><br/>\nクライアントキー</li>\n<li><strong>-w</strong><br/>\n絞り込み条件（JSON指定）</li>\n<li><strong>-p</strong><br/>\nクラス名</li>\n<li><strong>-m</strong><br/>\nHTTPメソッド</li>\n<li><strong>-l</strong><br/>\n取得件数</li>\n<li><strong>-s</strong><br/>\nスキップ件数</li>\n</ul>\n\n\n<h2 id=\"処理内容\">処理内容</h2>\n\n<p>署名文字列を使ってcurlコマンドを実行しています。条件を極力オプションにしましたので、自由にデータが取り出せるでしょう。署名作成部分についてはファイルではなく、標準出力を使うようになっています。そのため <code>echo -n</code> を使って最後に改行が入らないようにしています。 <code>-e</code> は改行が改行として認識されるためのものです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>sig=`echo -e -n ${sigStr} | openssl dgst -sha256 -binary -hmac ${CLIENT_KEY} | base64`</pre>\n\n\n<p>curlコマンドについてはネットワークアクセス時のプログレスが出ないように <code>-s</code> オプションを付けています。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>cmd=&#34;curl -s -S -X ${METHOD^^} -H \\&#34;X-NCMB-Application-Key: ${APPLICATION_KEY}\\&#34; \\\\</pre>\n\n\n<h2 id=\"jqとの組み合わせ\">jqとの組み合わせ</h2>\n\n<p><a href=\"https://stedolan.github.io/jq/\">jq</a>と組み合わせることで出力結果を見やすく整形できます。</p>\n\n<h2 id=\"注意点\">注意点</h2>\n\n<p>Linux系の各種コマンドを使っていますのでWindowsでは動きません。WSLであれば動くかも知れませんが未検証です。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>コードはわずか60行程度でごく短いものです。これだけのコードでmBaaSにアクセスしてデータの取得が可能です。どのような仕組みになっているかぜひご覧ください。</p>\n\n<p><a href=\"https://github.com/NCMBMania/ncmb-sh\">NCMBMania/ncmb-sh: CLIで使えるNCMB用のコマンドです</a></p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "Bashスクリプトで署名文字列を作る記事を投稿しましたが、その応用として署名文字列を使ってBashスクリプト版のNCMBクライアントを作成しました。 NCMBMania/ncmb-sh: CLIで使えるNCMB用のコマンドです 今はデータの取得のみですが、使い方を解説します。",
        "date_published": "2019-09-24T04:33:03.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613436077014",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/24/133247?utm_source=feed",
        "title": "CLIで署名文字列を作る",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190918/20190918162816.png\" alt=\"f:id:mbaasdevrel:20190918162816p:plain\" title=\"f:id:mbaasdevrel:20190918162816p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>mBaaSにアクセスする際には署名文字列を生成してリクエストヘッダーに設定する必要があります。その文字列は様々な条件によって生成されるので、プログラムからしか生成できないように思われています。しかし、生成方法さえ覚えてしまえば、コマンドラインから作ることもできます。</p>\n\n<p>今回はその方法を紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#下準備\">下準備</a><ul>\n            <li><a href=\"#アプリケーションキークエリストリングなどを連結\">アプリケーションキー、クエリストリングなどを連結</a></li>\n            <li><a href=\"#署名用文字列を作る\">署名用文字列を作る</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#コマンドを実行する\">コマンドを実行する</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"下準備\">下準備</h2>\n\n<h3 id=\"アプリケーションキークエリストリングなどを連結\">アプリケーションキー、クエリストリングなどを連結</h3>\n\n<p>まず、下記の情報を揃えます。実際には1〜4の情報は固定になります。</p>\n\n<ol>\n<li>アプリケーションキー（X-NCMB-Application-Key）</li>\n<li>シグネチャメソッド（SignatureMethod）</li>\n<li>シグネチャバージョン（SignatureVersion）</li>\n<li>タイムスタンプ（X-NCMB-Timestamp）</li>\n<li>クエリストリング</li>\n</ol>\n\n\n<p>つまり、以下は固定と考えても大丈夫です。並び順も次の通りです。</p>\n\n<ul>\n<li>SignatureMethod=HmacSHA256</li>\n<li>SignatureVersion=2</li>\n<li>X-NCMB-Application-Key=YOUR_APPLICATION_KEY</li>\n<li>X-NCMB-Timestamp=2013-12-02T02:44:35.452Z</li>\n</ul>\n\n\n<p>クエリストリングは以下のパターンがあります。並び順は次の通りです。条件を指定しない場合は定義しなくても大丈夫です。</p>\n\n<ul>\n<li>count（件数を取得する場合）</li>\n<li>include（ポインターで取得するクラス名）</li>\n<li>limit（取得件数）</li>\n<li>order（並び順）</li>\n<li>skip（取得時にスキップする件数）</li>\n<li>where（検索条件）</li>\n</ul>\n\n\n<p>whereはJSONで指定しますので、URLエンコードしなければなりません。これはnkfコマンドを使います。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ echo &#39;{&#34;testKey&#34;:&#34;testValue&#34;}&#39; | nkf -WwMQ | tr = %\n%7B%22testKey%22%3A%22testValue%22%7D</pre>\n\n\n<p>これらの情報を合わせて \"&amp;\" でつなぎます。つまり、次のような文字になります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>SignatureMethod=HmacSHA256&amp;SignatureVersion=2&amp;X-NCMB-Application-Key=6145f91061916580c742f806bab67649d10f45920246ff459404c46f00ff3e56&amp;X-NCMB-Timestamp=2013-12-02T02:44:35.452Z&amp;where=%7B%22testKey%22%3A%22testValue%22%7D</pre>\n\n\n<h3 id=\"署名用文字列を作る\">署名用文字列を作る</h3>\n\n<p>次に署名用文字列を作ります。これは以下の情報を使います。</p>\n\n<ul>\n<li>HTTPメソッド（GET、POSTなど）</li>\n<li>FQDN（mbaas.api.nifcloud.com または script.mbaas.api.nifcloud.com）</li>\n<li>パス（/2013-09-01/classes/TestClass など）</li>\n<li>上記の文字列</li>\n</ul>\n\n\n<p>これらの情報を改行で繋ぎます。今回はこれをsig.txtとして保存しています。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>GET\nmbaas.api.nifcloud.com\n/2013-09-01/classes/TestClass\nSignatureMethod=HmacSHA256&amp;SignatureVersion=2&amp;X-NCMB-Application-Key=6145f91061916580c742f806bab67649d10f45920246ff459404c46f00ff3e56&amp;X-NCMB-Timestamp=2013-12-02T02:44:35.452Z&amp;where=%7B%22testKey%22%3A%22testValue%22%7D</pre>\n\n\n<h2 id=\"コマンドを実行する\">コマンドを実行する</h2>\n\n<p>後はOpenSSLで署名を生成します。一旦バイナリで作って、Base64エンコードします。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ cat sig.txt | openssl dgst -sha256 -binary -hmac &#34;YOUR_CLIENT_KEY&#34; | base64\nAltGkQgXurEV7u0qMd+87ud7BKuueldoCjaMgVc9Bes=</pre>\n\n\n<p>この署名は<a href=\"https://mbaas.nifcloud.com/doc/current/rest/common/signature.html\">REST API リファレンス : シグネチャの生成方法 | ニフクラ mobile backend</a>で例示されている文字列と同じです。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>プログラムで作ることもできますが、署名生成のアルゴリムが分かっていると応用がきくようになります。CLIであれば一つ一つの手順が確認しやすいので、正しく生成できているかどうかもすぐに分かるでしょう。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "mBaaSにアクセスする際には署名文字列を生成してリクエストヘッダーに設定する必要があります。その文字列は様々な条件によって生成されるので、プログラムからしか生成できないように思われています。しかし、生成方法さえ覚えてしまえば、コマンドラインから作ることもできます。 今回はその方法を紹介します。",
        "date_published": "2019-09-24T04:32:47.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613390726515",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/12/144601?utm_source=feed",
        "title": "React Native用JavaScript SDKがFacebook認証に対応しました",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20180306/20180306160753.png\" alt=\"f:id:mbaasdevrel:20180306160753p:plain\" title=\"f:id:mbaasdevrel:20180306160753p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>スマートフォンアプリはSwiftやJavaのように特定のプラットフォームで利用できるもの、そしてUnityやMonacaのように複数のプラットフォームで動作するものがあります。React Nativeは後者に属する技術です。</p>\n\n<p>以前React Native用SDKを開発していたのですが、バージョンアップなどに伴って利用できなくなっていました。そこでTypeScriptに沿う形で改めてReact Native SDKを開発しはじめました。なお、これは非公式のSDKになりますので、サポート外になります。</p>\n\n<p>今回はFacebook認証の使い方を紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#下準備\">下準備</a></li>\n    <li><a href=\"#使い方\">使い方</a><ul>\n            <li><a href=\"#セットアップ\">セットアップ</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#コード\">コード</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"下準備\">下準備</h2>\n\n<p>まず<a href=\"https://developers.facebook.com/\">Facebook Developers</a>でFacebookアプリを登録します。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190809/20190809154159.png\" alt=\"f:id:mbaasdevrel:20190809154159p:plain\" title=\"f:id:mbaasdevrel:20190809154159p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>次に app.json を開いて、下記を追加します。facebookAppIdはアプリのIDで、facebookSchemaは<a href=\"https://developers.facebook.com/docs/facebook-login/ios\">iOS - Facebookログイン</a>の4.プロジェクトを構成するを構成する、の下にある <code>fb</code> ではじまる文字列です。これは fb + アプリID となっているようです。</p>\n\n<pre class=\"code lang-json\" data-lang=\"json\" data-unlink>&quot;<span class=\"synStatement\">facebookScheme</span>&quot;: &quot;<span class=\"synConstant\">fb369...982</span>&quot;,\n&quot;<span class=\"synStatement\">facebookAppId</span>&quot;: &quot;<span class=\"synConstant\">369...982</span>&quot;,\n&quot;<span class=\"synStatement\">facebookDisplayName</span>&quot;: &quot;<span class=\"synConstant\">NCMB Login</span>&quot;,\n</pre>\n\n\n<p>また、このアプリIDはmBaaSの管理画面でも設定し、Facebook認証を有効にしてください。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190809/20190809154222.png\" alt=\"f:id:mbaasdevrel:20190809154222p:plain\" title=\"f:id:mbaasdevrel:20190809154222p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2 id=\"使い方\">使い方</h2>\n\n<p>では実際の使い方です。まずExpoのFacebook認証ライブラリをインストールします。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>$ expo install expo-facebook</pre>\n\n\n<p>そしてこのライブラリを読み込みます。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> * as Facebook from <span class=\"synConstant\">'expo-facebook'</span>;\n</pre>\n\n\n<p>まず <code>logInWithReadPermissionsAsync</code> を実行して、Facebook認証を行うためのダイアログが出します。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> response = await Facebook.logInWithReadPermissionsAsync(config.facebook.appId, <span class=\"synIdentifier\">{</span>\n  permissions: <span class=\"synIdentifier\">[</span><span class=\"synConstant\">'public_profile'</span><span class=\"synIdentifier\">]</span>,\n<span class=\"synIdentifier\">}</span>);\n</pre>\n\n\n<p>許可が得られるとアクセストークンが返ってきますので、自分のプロフィール情報を取得します。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> data = await fetch(`https:<span class=\"synComment\">//graph.facebook.com/me?access_token=${response.token}`);</span>\n<span class=\"synStatement\">const</span> json = await data.json();\n</pre>\n\n\n<p>そしてmBaaSに送信する認証情報を組み立てます。認証処理は <code>user.signUpWith('facebook', authData)</code> にて行います。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> authData = <span class=\"synIdentifier\">{</span>\n  id: json.id,\n  access_token: response.token,\n  expires: response.expires\n<span class=\"synIdentifier\">}</span>;\n<span class=\"synStatement\">const</span> user = <span class=\"synStatement\">new</span> ncmb.User();\n<span class=\"synStatement\">if</span> (await user.signUpWith(<span class=\"synConstant\">'facebook'</span>, authData)) <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'Logged in'</span>);\n<span class=\"synIdentifier\">}</span> <span class=\"synStatement\">else</span> <span class=\"synIdentifier\">{</span>\n  console.log(<span class=\"synConstant\">'Login failed.'</span>);\n<span class=\"synIdentifier\">}</span>\n</pre>\n\n\n<h3 id=\"セットアップ\">セットアップ</h3>\n\n<p>インストールは npm で行います。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>npm i ncmb-react-native -S</pre>\n\n\n<p>まずライブラリを読み込みます。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> NCMB from <span class=\"synConstant\">'ncmb-react-native'</span>;\n</pre>\n\n\n<p>そして初期化します。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> config from <span class=\"synConstant\">'./config.json'</span>;\n<span class=\"synStatement\">const</span> ncmb = <span class=\"synStatement\">new</span> NCMB(config.applicationKey, config.clientKey);\n</pre>\n\n\n<h2 id=\"コード\">コード</h2>\n\n<p>SDKは<a href=\"https://github.com/NCMBMania/ncmb-react-native\">NCMBMania/ncmb-react-native: NCMB SDK for React Native</a>にて公開しています。ライセンスはMIT Licenseです。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>認証機能はよく使われる機能です。スマートフォンアプリであれば、Facebook認証はよく使われるものになるでしょう。ぜひ使ってみてください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "スマートフォンアプリはSwiftやJavaのように特定のプラットフォームで利用できるもの、そしてUnityやMonacaのように複数のプラットフォームで動作するものがあります。React Nativeは後者に属する技術です。 以前React Native用SDKを開発していたのですが、バージョンアップなどに伴って利用できなくなっていました。そこでTypeScriptに沿う形で改めてReact Native SDKを開発しはじめました。なお、これは非公式のSDKになりますので、サポート外になります。 今回はFacebook認証の使い方を紹介します。",
        "date_published": "2019-09-12T05:46:01.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613390137573",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/12/144539?utm_source=feed",
        "title": "React Native用JavaScript SDKがファイルアップロードに対応しました",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20180306/20180306160753.png\" alt=\"f:id:mbaasdevrel:20180306160753p:plain\" title=\"f:id:mbaasdevrel:20180306160753p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>スマートフォンアプリはSwiftやJavaのように特定のプラットフォームで利用できるもの、そしてUnityやMonacaのように複数のプラットフォームで動作するものがあります。React Nativeは後者に属する技術です。</p>\n\n<p>以前React Native用SDKを開発していたのですが、バージョンアップなどに伴って利用できなくなっていました。そこでTypeScriptに沿う形で改めてReact Native SDKを開発しはじめました。なお、これは非公式のSDKになりますので、サポート外になります。</p>\n\n<p>今回はファイルアップロード機能を紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#使い方\">使い方</a></li>\n    <li><a href=\"#ACLの扱い\">ACLの扱い</a><ul>\n            <li><a href=\"#セットアップ\">セットアップ</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#コード\">コード</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"使い方\">使い方</h2>\n\n<p>ファイルアップロードはテキストファイル、バイナリファイルの二種類が想定されています。まずテキストファイルの場合です。二つ目の引数にファイルの内容をそのまま適用してください。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> file = <span class=\"synStatement\">new</span> ncmb.File();\n<span class=\"synStatement\">const</span> res = await file.upload(<span class=\"synConstant\">'test.txt'</span>, <span class=\"synConstant\">'Hello, world!'</span>);\n</pre>\n\n\n<p>次にバイナリです。例えばカメラの写真をアップロードする場合です。この場合、画像のURIを指定します。以下はiOSの場合です。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> <span class=\"synIdentifier\">{</span> <span class=\"synStatement\">status</span> <span class=\"synIdentifier\">}</span> = await Permissions.askAsync(Permissions.CAMERA_ROLL);\n<span class=\"synStatement\">if</span> (<span class=\"synStatement\">status</span> === <span class=\"synConstant\">'granted'</span>) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> result = await ImagePicker.launchImageLibraryAsync(<span class=\"synIdentifier\">{</span>\n    mediaTypes: ImagePicker.MediaTypeOptions.All,\n    allowsEditing: <span class=\"synConstant\">false</span>\n  <span class=\"synIdentifier\">}</span>);\n  <span class=\"synStatement\">const</span> fileName = result.uri.match(<span class=\"synConstant\">/^.*\\/([a-zA-Z0-9\\-]*\\.jpg)$/</span>)<span class=\"synIdentifier\">[</span>1<span class=\"synIdentifier\">]</span>;\n  <span class=\"synStatement\">const</span> file = <span class=\"synStatement\">new</span> ncmb.File();\n  <span class=\"synStatement\">const</span> res = await file.upload(fileName, <span class=\"synIdentifier\">{</span>uri: result.uri.replace(<span class=\"synConstant\">'file://'</span>, <span class=\"synConstant\">''</span>), type: result.type<span class=\"synIdentifier\">}</span>);\n<span class=\"synIdentifier\">}</span>\n</pre>\n\n\n<p>Androidは次のようになります。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> result = await ImagePicker.launchImageLibraryAsync(<span class=\"synIdentifier\">{</span>\n  mediaTypes: ImagePicker.MediaTypeOptions.All,\n  allowsEditing: <span class=\"synConstant\">false</span>\n<span class=\"synIdentifier\">}</span>);\n<span class=\"synStatement\">const</span> fileName = result.uri.match(<span class=\"synConstant\">/^.*\\/([a-zA-Z0-9\\-]*\\.jpg)$/</span>)<span class=\"synIdentifier\">[</span>1<span class=\"synIdentifier\">]</span>;\n<span class=\"synStatement\">const</span> file = <span class=\"synStatement\">new</span> ncmb.File();\n<span class=\"synStatement\">const</span> res = await file.upload(fileName, <span class=\"synIdentifier\">{</span>uri: result.uri, type: result.type<span class=\"synIdentifier\">}</span>);\n</pre>\n\n\n<h2 id=\"ACLの扱い\">ACLの扱い</h2>\n\n<p>ACLは3つ目の引数で指定してください。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">const</span> acl = <span class=\"synStatement\">new</span> ncmb.Acl();\nacl\n  .setPublicReadAccess(<span class=\"synConstant\">true</span>)\n  .setPublicWriteAccess(<span class=\"synConstant\">false</span>);\n  <span class=\"synStatement\">const</span> file = <span class=\"synStatement\">new</span> ncmb.File();\n  <span class=\"synStatement\">const</span> res = await file.upload(fileName, <span class=\"synIdentifier\">{</span>uri: result.uri, type: result.type<span class=\"synIdentifier\">}</span>, acl);\n</pre>\n\n\n<h3 id=\"セットアップ\">セットアップ</h3>\n\n<p>インストールは npm で行います。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>npm i ncmb-react-native -S</pre>\n\n\n<p>まずライブラリを読み込みます。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> NCMB from <span class=\"synConstant\">'ncmb-react-native'</span>;\n</pre>\n\n\n<p>そして初期化します。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">import</span> config from <span class=\"synConstant\">'./config.json'</span>;\n<span class=\"synStatement\">const</span> ncmb = <span class=\"synStatement\">new</span> NCMB(config.applicationKey, config.clientKey);\n</pre>\n\n\n<h2 id=\"コード\">コード</h2>\n\n<p>SDKは<a href=\"https://github.com/NCMBMania/ncmb-react-native\">NCMBMania/ncmb-react-native: NCMB SDK for React Native</a>にて公開しています。ライセンスはMIT Licenseです。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>カメラの写真をアップロードする、作成したテキストデータを保存するなど、ファイルアップロードを利用する機会は多いかと思います。ぜひReact Nativeアプリで活用してください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "スマートフォンアプリはSwiftやJavaのように特定のプラットフォームで利用できるもの、そしてUnityやMonacaのように複数のプラットフォームで動作するものがあります。React Nativeは後者に属する技術です。 以前React Native用SDKを開発していたのですが、バージョンアップなどに伴って利用できなくなっていました。そこでTypeScriptに沿う形で改めてReact Native SDKを開発しはじめました。なお、これは非公式のSDKになりますので、サポート外になります。 今回はファイルアップロード機能を紹介します。",
        "date_published": "2019-09-12T05:45:39.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613384622953",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/12/144454?utm_source=feed",
        "title": "データストアのデータ存在チェック法（JavaScript編）",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20180913/20180913163950.png\" alt=\"f:id:mbaasdevrel:20180913163950p:plain\" title=\"f:id:mbaasdevrel:20180913163950p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>データストアで検索を行い、<b>データの存在状態によって処理分け</b>することがあります。そんな時に間違った書き方をすると、思わぬ不具合につながります。今回はそんな問題を回避する方法を紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#ifだけではダメ\">ifだけではダメ</a></li>\n    <li><a href=\"#catchにはいきません\">catchにはいきません</a></li>\n    <li><a href=\"#判定方法\">判定方法</a><ul>\n            <li><a href=\"#objectIdの存在をチェック\">objectIdの存在をチェック</a></li>\n            <li><a href=\"#Objectkeysを使う\">Object.keysを使う</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"ifだけではダメ\">ifだけではダメ</h2>\n\n<p>例えばこんなコードを記述したとします。もちろんデータはありません。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const Nothing = ncmb.DataStore(&#39;Nothing&#39;);\nconst item = await Nothing\n  .equalTo(&#39;objectId&#39;, &#39;nothing&#39;)\n  .fetch();\nif (item) {\n  console.log(&#39;データあり&#39;);\n} else {\n  console.log(&#39;データなし&#39;);\n}</pre>\n\n\n<p>このコードを実行すると、データありと出力されます。itemは空のオブジェクトであり、空のオブジェクトはtrueとして判定されます。</p>\n\n<h2 id=\"catchにはいきません\">catchにはいきません</h2>\n\n<p>次に以下のようなコードを書いたとします。データがなかったとしても、catchにいくことはないので注意してください。catchにいくのはネットワークエラーや署名や権限エラーなど、システム上のエラーによる場合のみです。通信が正常に行えている場合、データがなかったとしても正常処理として then に送られます。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const Nothing = ncmb.DataStore(&#39;Nothing&#39;);\nconst item = await Nothing\n  .equalTo(&#39;objectId&#39;, &#39;nothing&#39;)\n  .fetch()\n  .then(item =&gt; {\n    console.log(&#39;データあり&#39;);\n  })\n  .catch(e =&gt; {\n    console.log(&#39;データなし&#39;);\n  });</pre>\n\n\n<h2 id=\"判定方法\">判定方法</h2>\n\n<h3 id=\"objectIdの存在をチェック\">objectIdの存在をチェック</h3>\n\n<p>データがない場合は空のオブジェクトになりますので、 objectIdの存在によって判断できます。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const Nothing = ncmb.DataStore(&#39;Nothing&#39;);\nconst item = await Nothing\n  .equalTo(&#39;objectId&#39;, &#39;nothing&#39;)\n  .fetch();\nif (item.objectId) {\n  console.log(&#39;データあり&#39;);\n} else {\n  console.log(&#39;データなし&#39;);\n}</pre>\n\n\n<h3 id=\"Objectkeysを使う\">Object.keysを使う</h3>\n\n<p>オブジェクトのキーの数で判定もできます。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const Nothing = ncmb.DataStore(&#39;Nothing&#39;);\nconst item = await Nothing\n  .equalTo(&#39;objectId&#39;, &#39;nothing&#39;)\n  .fetch();\nif (Object.keys(item) &gt; 0) {\n  console.log(&#39;データあり&#39;);\n} else {\n  console.log(&#39;データなし&#39;);\n}</pre>\n\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>mBaaSのデータストアはとても柔軟であり、存在しないクラス、存在しないデータがあってもエラーにはならず、空のデータが返ってくるのみとなっています。そのため、取り扱いに注意しないと正しい判定ができなくなります。なおfetchの場合は最初の1件ですが、fetchAllは空の配列が返ってきます。その場合はObject.keysは使えませんので注意してください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "データストアで検索を行い、データの存在状態によって処理分けすることがあります。そんな時に間違った書き方をすると、思わぬ不具合につながります。今回はそんな問題を回避する方法を紹介します。",
        "date_published": "2019-09-12T05:44:54.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613384621795",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/11/111636?utm_source=feed",
        "title": "mBaaSで多要素認証（ワンタイムパスワード）を使う",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190802/20190802215347.png\" alt=\"f:id:mbaasdevrel:20190802215347p:plain\" title=\"f:id:mbaasdevrel:20190802215347p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>スマートフォンに重要なデータが保存されるのに伴って、セキュリティ意識の高まりが強まっています。その際利用されるのが多要素認証と呼ばれるものです。ID/パスワードの認証に加えて、SMSやワンタイムパスワード、セキュリティキーなどを使って認証を行います。</p>\n\n<p>mBaaSではデフォルトでは追加認証要素には対応していません。そこで、スクリプト機能を使ってワンタイムパスワードを使った認証に対応してみたいと思います。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#要件\">要件</a></li>\n    <li><a href=\"#QRコードを生成する\">QRコードを生成する</a><ul>\n            <li><a href=\"#セキュリティコードの生成\">セキュリティコードの生成</a></li>\n            <li><a href=\"#セキュリティコードを-mBaaSに保存する\">セキュリティコードを mBaaSに保存する</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#検証する\">検証する</a><ul>\n            <li><a href=\"#スクリプト\">スクリプト</a></li>\n            <li><a href=\"#クライアントの実装\">クライアントの実装</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"要件\">要件</h2>\n\n<ul>\n<li>mBaaSのID/パスワード認証を使います</li>\n<li>認証自体を制限するのではなく、特定の重要な機能（決済など）を制限する目的とします</li>\n</ul>\n\n\n<p>mBaaSでデフォルトで提供しているID/パスワード認証を使いますので、認証自体は多要素認証を使わずに完了してしまいます。そこで、決済やクレジットカード情報の登録など重要な機能を使う場合にワンタイムパスワードを利用する想定で開発します。</p>\n\n<h2 id=\"QRコードを生成する\">QRコードを生成する</h2>\n\n<p>ワンタイムパスワードを使う際には、専用のアプリ（Google Authenticator、Authyなど）でQRコードを読み込んで実行するでしょう。まず、このQRコードを生成します。</p>\n\n<h3 id=\"セキュリティコードの生成\">セキュリティコードの生成</h3>\n\n<p>QRコードではユーザごとにランダムなセキュリティコードを用います。そのコードを生成するのに使えるのが speakeasy というライブラリです。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const speakeasy = require(&#39;speakeasy&#39;);</pre>\n\n\n<p>そして、キーの名前（サービス名）や発行者、文字列の長さを指定してセキュリティキーを生成します。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const secret = speakeasy.generateSecret({ name, issuer, length });</pre>\n\n\n<p>セキュリティキーを生成したら、そのURLを取得してQRコードとして表示します。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const url = speakeasy.otpauthURL({\n  secret: secret,\n  label: encodeURIComponent(name),\n  issuer: issuer\n});\nnew QRCode(document.getElementById(&#34;qrcode&#34;), url);</pre>\n\n\n<p>これでQRコードが生成されます。</p>\n\n<h3 id=\"セキュリティコードを-mBaaSに保存する\">セキュリティコードを mBaaSに保存する</h3>\n\n<p>上記のコードで生成したセキュリティコードは、検証にも用います。そこで、コードをmBaaSに保存しておきます。ユーザからは書き込み（更新）できるように、検証時のために Admin グループに入っているユーザに読み込み権限を付けておきます。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const user = ncmb.User.getCurrentUser();\nif (!user) throw new Error(&#34;You&#39;re not logged in&#34;);\nconst Secret = ncmb.DataStore(&#39;Secret&#39;);\ntry {\n  const secret = await Secret\n    .equalTo(&#39;userId&#39;, user.objectId)\n    .fetch();\n  if (secret.objectId) {\n    return secret.secret;\n  }\n} catch (e) {\n  throw e;\n}\nconst secret = new Secret;\nconst string = speakeasy.generateSecret({ name, issuer, length });\nconst acl = new ncmb.Acl;\nacl\n  .setUserReadAccess(user, true)\n  .setUserWriteAccess(user, true)\n  .setRoleReadAccess(&#39;Admin&#39;, true);\nawait secret\n  .set(&#39;secret&#39;, string.ascii)\n  .set(&#39;userId&#39;, user.objectId)\n  .set(&#39;acl&#39;, acl)\n  .save();</pre>\n\n\n<h2 id=\"検証する\">検証する</h2>\n\n<p>ここまでのコードでコード管理用アプリに登録まで完了します。次に、コードを入力して検証をします。</p>\n\n<h3 id=\"スクリプト\">スクリプト</h3>\n\n<p>サーバでも speakeasy を使います。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const speakeasy = require(&#39;speakeasy&#39;);</pre>\n\n\n<p>まず管理ユーザでログインします。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const userName = &#39;admin&#39;;\nconst password = &#39;admin&#39;;\nawait ncmb.User.login(userName, password);</pre>\n\n\n<p>次にデータストアに保存されているセキュリティキーを取得します。実行時にはクライアントからユーザIDを送信してもらい、それを使ってデータを検索します。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const Secret = ncmb.DataStore(&#39;Secret&#39;);\nconst secret = await Secret\n  .equalTo(&#39;userId&#39;, req.body.user_id)\n  .fetch();\nif (!secret.objectId) {\n  return res.status(404).json({message: `User not found. ${req.body.user_id}`});\n}</pre>\n\n\n<p>そして検証します。 <code>code</code> というのがユーザが入力したワンタイムパスワードです。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>const code = req.body.code;\nconst verified = speakeasy.totp.verify({\n  secret: secret.secret,\n  encoding: &#39;ascii&#39;,\n  token: code\n});</pre>\n\n\n<p>検証結果に応じてレスポンスを返します。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>if (verified) {\n  return res.status(200).json({message: &#39;Verified.&#39;});\n} else {\n  return res.status(401).json({message: &#39;Failed.&#39;});\n}</pre>\n\n\n<h3 id=\"クライアントの実装\">クライアントの実装</h3>\n\n<p>スクリプトが <code>totp.js</code> とした場合、クライアントでは以下のようなコードで検証を実行します。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>document.getElementById(&#34;verify&#34;).onclick = async (e) =&gt; {\n  const user = ncmb.User.getCurrentUser();\n  if (!user) throw new Error(&#34;You&#39;re not logged in&#34;);\n  const code = document.getElementById(&#34;code&#34;).value;\n  try {\n    const response = await ncmb.Script\n      .data({\n        user_id: user.objectId,\n        code: code\n      }) \n      .exec(&#39;POST&#39;, &#39;totp.js&#39;);\n    document.getElementById(&#34;result&#34;).innerHTML = &#39;検証OK&#39;;\n  } catch (e) {\n    document.getElementById(&#34;result&#34;).innerHTML = &#39;検証NG&#39;;\n  }\n}</pre>\n\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>今回のコードは<a href=\"https://github.com/NCMBMania/TOTP-Demo\">NCMBMania/TOTP-Demo: mBaaSでワンタイムパスワードを実現するデモです。</a>にあります。実装時の参考にしてください。アプリのセキュリティは強く求められるようになっています。サーバのセキュリティはmBaaSが提供できますが、アプリのUI/UXでも工夫が必要でしょう。ぜひ皆さんのアプリ開発で役立ててください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "スマートフォンに重要なデータが保存されるのに伴って、セキュリティ意識の高まりが強まっています。その際利用されるのが多要素認証と呼ばれるものです。ID/パスワードの認証に加えて、SMSやワンタイムパスワード、セキュリティキーなどを使って認証を行います。 mBaaSではデフォルトでは追加認証要素には対応していません。そこで、スクリプト機能を使ってワンタイムパスワードを使った認証に対応してみたいと思います。",
        "date_published": "2019-09-11T02:16:36.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/17680117127212352758",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/11/111530?utm_source=feed",
        "title": "様々な言語からmBaaSを扱うために署名作成アルゴリズムを考える【Dart編】",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190702/20190702184813.png\" alt=\"f:id:mbaasdevrel:20190702184813p:plain\" title=\"f:id:mbaasdevrel:20190702184813p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>プログラムからmBaaSを操作する際にはAPIを利用しますが、その時に肝になるのが署名文字列の作成です。パスなどをつなげて、SHA256でハッシュ値を作ったりと非常に面倒な処理が必要です。</p>\n\n<p>アプリ側であればSDKを使ってもらえれば問題ありません。問題はサーバサイドで、オフィシャルではNode.js、非公式ではRubyとPHPくらいしかライブラリがありません。</p>\n\n<p>そこで今回は一番面倒と思われる署名作成処理について、他の言語での実装方法について解説します。今回はDartです。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#必要な引数について\">必要な引数について</a></li>\n    <li><a href=\"#ライブラリのインポート\">ライブラリのインポート</a></li>\n    <li><a href=\"#生成前の変数について\">生成前の変数について</a></li>\n    <li><a href=\"#メソッドFQDNパスを配列に入れる\">メソッド、FQDN、パスを配列に入れる</a></li>\n    <li><a href=\"#署名を生成する\">署名を生成する</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"必要な引数について\">必要な引数について</h2>\n\n<p>署名を作成する際には以下の情報が必要です。</p>\n\n<table>\n<thead>\n<tr>\n<th> 変数 </th>\n<th> 名前 </th>\n<th> 説明 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>method</td>\n<td>HTTPメソッド</td>\n<td>GETやPOSTといった文字列です</td>\n</tr>\n<tr>\n<td>fqdn</td>\n<td>FQDN</td>\n<td>通常はmbaas.api.nifcloud.com、スクリプトの場合はscript.mbaas.api.nifcloud.comになります</td>\n</tr>\n<tr>\n<td>path</td>\n<td>リクエストするAPIのパス</td>\n<td>/2013-09-01/classes/TestClassなどです</td>\n</tr>\n<tr>\n<td>queries</td>\n<td>クエリストリング</td>\n<td>クエリストリングです。今回はマップで作成しています</td>\n</tr>\n<tr>\n<td>applicationKey</td>\n<td>アプリケーションキー</td>\n<td>管理画面で取得できるアプリケーションキーです</td>\n</tr>\n<tr>\n<td>signatureMethod</td>\n<td>シグネチャメソッド</td>\n<td>HmacSHA256という文字列固定です</td>\n</tr>\n<tr>\n<td>signatureVersion</td>\n<td>シグネチャバージョン</td>\n<td>2という文字列固定です</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td>タイムスタンプ</td>\n<td>APIリクエスト時の時間です</td>\n</tr>\n<tr>\n<td>clientKey</td>\n<td>クライアントキー</td>\n<td>管理画面で取得できるクライアントキーです</td>\n</tr>\n</tbody>\n</table>\n\n\n<h2 id=\"ライブラリのインポート\">ライブラリのインポート</h2>\n\n<p>まずは必要なライブラリをインポートします。今回はCUIで動かします。</p>\n\n<pre class=\"code lang-dart\" data-lang=\"dart\" data-unlink><span class=\"synPreProc\">import </span><span class=\"synConstant\">&quot;dart:collection&quot;</span>;\n<span class=\"synPreProc\">import </span><span class=\"synConstant\">'dart:convert'</span>;\n<span class=\"synPreProc\">import </span><span class=\"synConstant\">'package:crypto/crypto.dart'</span>;\n</pre>\n\n\n<h2 id=\"生成前の変数について\">生成前の変数について</h2>\n\n<p>まず上記の変数情報を揃えます。各値は検証のため、<a href=\"https://mbaas.nifcloud.com/doc/current/rest/common/signature.html\">REST API リファレンス : シグネチャの生成方法 | ニフクラ mobile backend</a>に合わせています。</p>\n\n<pre class=\"code lang-dart\" data-lang=\"dart\" data-unlink><span class=\"synType\">const</span> method = <span class=\"synConstant\">'GET'</span>;\n<span class=\"synType\">const</span> fqdn = <span class=\"synConstant\">'mbaas.api.nifcloud.com'</span>;\n<span class=\"synType\">const</span> path = <span class=\"synConstant\">'/2013-09-01/classes/TestClass'</span>;\n<span class=\"synType\">const</span> queries = {\n  <span class=\"synConstant\">'where'</span><span class=\"synStatement\">:</span> {\n    <span class=\"synConstant\">'testKey'</span><span class=\"synStatement\">:</span> <span class=\"synConstant\">&quot;testValue&quot;</span>\n  }\n};\n\n<span class=\"synType\">const</span> applicationKeyName = <span class=\"synConstant\">'X-NCMB-Application-Key'</span>;\n<span class=\"synType\">const</span> applicationKeyValue = <span class=\"synConstant\">'6145f91061916580c742f806bab67649d10f45920246ff459404c46f00ff3e56'</span>;\n<span class=\"synType\">const</span> clientKeyValue = <span class=\"synConstant\">'1343d198b510a0315db1c03f3aa0e32418b7a743f8e4b47cbff670601345cf75'</span>;\n\n<span class=\"synType\">const</span> signatureMethodName = <span class=\"synConstant\">'SignatureMethod'</span>;\n<span class=\"synType\">const</span> signatureMethodValue = <span class=\"synConstant\">'HmacSHA256'</span>;\n<span class=\"synType\">const</span> signatureVerionName = <span class=\"synConstant\">'SignatureVersion'</span>;\n<span class=\"synType\">const</span> signatureVerionValue = <span class=\"synConstant\">'2'</span>;\n<span class=\"synType\">const</span> timeStampName = <span class=\"synConstant\">'X-NCMB-Timestamp'</span>;\n<span class=\"synType\">const</span> timeStampValue = <span class=\"synConstant\">'2013-12-02T02:44:35.452Z'</span>;\n</pre>\n\n\n<h2 id=\"メソッドFQDNパスを配列に入れる\">メソッド、FQDN、パスを配列に入れる</h2>\n\n<p>最終的に改行繋ぎの文字列を作るために、まずはマップに入れておきます。マップはSplayTreeMapを使って自動的にソートを行います。そして最後にsignatureStringにメソッドやFQDNといった情報を入れます。</p>\n\n<pre class=\"code lang-dart\" data-lang=\"dart\" data-unlink><span class=\"synType\">var</span> hash = <span class=\"synStatement\">new</span> SplayTreeMap<span class=\"synStatement\">&lt;</span><span class=\"synType\">String</span>, <span class=\"synType\">String</span><span class=\"synStatement\">&gt;</span>();\nhash[applicationKeyName] = applicationKeyValue;\nhash[signatureMethodName] = signatureMethodValue;\nhash[signatureVerionName] = signatureVerionValue;\nhash[timeStampName] = timeStampValue;\nqueries.forEach((key, params) {\n  hash[key] = Uri.encodeComponent(jsonEncode(params));\n});\n<span class=\"synType\">var</span> ary = <span class=\"synStatement\">[]</span>;\nhash.forEach((key, value) {\n  ary.add(<span class=\"synConstant\">'</span><span class=\"synPreProc\">$key</span><span class=\"synConstant\">=</span><span class=\"synPreProc\">$value</span><span class=\"synConstant\">'</span>);\n});\n<span class=\"synType\">var</span> signatureString = <span class=\"synStatement\">[]</span>;\nsignatureString.add(method);\nsignatureString.add(fqdn);\nsignatureString.add(path);\nsignatureString.add(ary.join(<span class=\"synConstant\">'&amp;'</span>));\n</pre>\n\n\n<h2 id=\"署名を生成する\">署名を生成する</h2>\n\n<p>署名を生成するのはHMAC SHA256でハッシュを生成し、それをBASE64でエンコードするだけです。処理としては以下のようになります。</p>\n\n<pre class=\"code lang-dart\" data-lang=\"dart\" data-unlink><span class=\"synType\">var</span> converter = <span class=\"synStatement\">new</span> Utf8Encoder();\n<span class=\"synType\">List</span><span class=\"synStatement\">&lt;</span><span class=\"synType\">int</span><span class=\"synStatement\">&gt;</span> key = converter.convert(clientKeyValue);\n<span class=\"synType\">List</span><span class=\"synStatement\">&lt;</span><span class=\"synType\">int</span><span class=\"synStatement\">&gt;</span> messageBytes = converter.convert(signatureString.join(<span class=\"synConstant\">&quot;</span><span class=\"synSpecial\">\\n</span><span class=\"synConstant\">&quot;</span>));\n<span class=\"synType\">var</span> hmacSha256 = <span class=\"synStatement\">new</span> Hmac(sha256, key);\n<span class=\"synType\">var</span> digest = hmacSha256.convert(messageBytes);\n\n<span class=\"synType\">var</span> str = base64.encode(digest.bytes);\n</pre>\n\n\n<p>これで生成される文字列がドキュメントと同じ署名になります。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>この処理で署名生成処理が完了します。署名され作れればmBaaSとサーバサイドで連携するのは難しくありません。ぜひ試してみてください。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "プログラムからmBaaSを操作する際にはAPIを利用しますが、その時に肝になるのが署名文字列の作成です。パスなどをつなげて、SHA256でハッシュ値を作ったりと非常に面倒な処理が必要です。 アプリ側であればSDKを使ってもらえれば問題ありません。問題はサーバサイドで、オフィシャルではNode.js、非公式ではRubyとPHPくらいしかライブラリがありません。 そこで今回は一番面倒と思われる署名作成処理について、他の言語での実装方法について解説します。今回はDartです。",
        "date_published": "2019-09-11T02:15:30.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/26006613384624190",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/11/111451?utm_source=feed",
        "title": "mBaaSの多彩なAPIを洗い出す",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190802/20190802215625.png\" alt=\"f:id:mbaasdevrel:20190802215625p:plain\" title=\"f:id:mbaasdevrel:20190802215625p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>mBaaSはアプリと連携して使うのが前提なので、APIの塊であると言えます。多数のAPIが用意されており、機能も多様です。特にSDKを開発する際などは、APIの網羅性が重要になります。</p>\n\n<p>今回はmBaaSで提供されている機能をAPIの面から紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#基本\">基本</a></li>\n    <li><a href=\"#データストア\">データストア</a></li>\n    <li><a href=\"#会員管理\">会員管理</a></li>\n    <li><a href=\"#ロール\">ロール</a></li>\n    <li><a href=\"#プッシュ通知\">プッシュ通知</a></li>\n    <li><a href=\"#デバイストークン\">デバイストークン</a></li>\n    <li><a href=\"#ファイルストア\">ファイルストア</a></li>\n    <li><a href=\"#スクリプト\">スクリプト</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"基本\">基本</h2>\n\n<p>エンドポイントURLは <code>https://mbaas.api.nifcloud.com/2013-09-01</code> からはじまります。</p>\n\n<h2 id=\"データストア\">データストア</h2>\n\n<p>NoSQL型のデータベース機能です。</p>\n\n<table>\n<thead>\n<tr>\n<th> 処理 </th>\n<th> HTTPメソッド </th>\n<th> エンドポイントパス </th>\n<th> 備考 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>データ作成</td>\n<td>POST      </td>\n<td> /classes/:className/ </td>\n<td> :className が可変 </td>\n</tr>\n<tr>\n<td>データ取得（1件）</td>\n<td>GET </td>\n<td> /classes/:className/:objectId </td>\n<td>:className と :objectId が可変 </td>\n</tr>\n<tr>\n<td>データ取得（複数件）</td>\n<td>GET </td>\n<td> /classes/:className/ </td>\n<td>where/order/limit/skipといったクエリパラメータを指定</td>\n</tr>\n<tr>\n<td>データ更新</td>\n<td>PUT</td>\n<td>/classes/:className/:objectId</td>\n<td>:className と :objectId が可変 </td>\n</tr>\n<tr>\n<td>データ削除</td>\n<td>DELETE</td>\n<td>/classes/:className/:objectId</td>\n<td>:className と :objectId が可変 </td>\n</tr>\n</tbody>\n</table>\n\n\n<h2 id=\"会員管理\">会員管理</h2>\n\n<p>認証周りの機能を提供します。</p>\n\n<table>\n<thead>\n<tr>\n<th> 処理 </th>\n<th> HTTPメソッド </th>\n<th> エンドポイントパス </th>\n<th> 備考 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>会員登録</td>\n<td>POST</td>\n<td>/users</td>\n<td></td>\n</tr>\n<tr>\n<td>会員登録メール要求</td>\n<td>POST</td>\n<td>/requestMailAddressUserEntry</td>\n<td> </td>\n</tr>\n<tr>\n<td>会員取得</td>\n<td>GET</td>\n<td>/users/:objectId</td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>会員更新</td>\n<td>PUT</td>\n<td>/users/:objectId</td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>会員削除</td>\n<td>DELETE</td>\n<td>/users/:objectId</td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>ログアウト</td>\n<td>GET</td>\n<td>/logout</td>\n<td> </td>\n</tr>\n<tr>\n<td>会員取得（複数件）</td>\n<td>GET </td>\n<td> /users/ </td>\n<td>where/order/limit/skipといったクエリパラメータを指定</td>\n</tr>\n<tr>\n<td>パスワード再発行リクエストメール要求</td>\n<td>POST</td>\n<td>/requestPasswordReset</td>\n<td> </td>\n</tr>\n</tbody>\n</table>\n\n\n<h2 id=\"ロール\">ロール</h2>\n\n<p>権限周りの機能を実現するロールに関するAPIです。</p>\n\n<table>\n<thead>\n<tr>\n<th> 処理 </th>\n<th> HTTPメソッド </th>\n<th> エンドポイントパス </th>\n<th> 備考 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ロール作成</td>\n<td>POST      </td>\n<td> /roles </td>\n<td>  </td>\n</tr>\n<tr>\n<td>ロール取得（1件）</td>\n<td>GET </td>\n<td> /roles/:objectId </td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>ロール取得（複数件）</td>\n<td>GET </td>\n<td> /roles/ </td>\n<td>where/order/limit/skipといったクエリパラメータを指定</td>\n</tr>\n<tr>\n<td>ロール更新</td>\n<td>PUT</td>\n<td>/roles/:objectId</td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>ロール削除</td>\n<td>DELETE</td>\n<td>/roles/:objectId</td>\n<td>:objectId が可変 </td>\n</tr>\n</tbody>\n</table>\n\n\n<h2 id=\"プッシュ通知\">プッシュ通知</h2>\n\n<p>プッシュ通知の作成、開封登録などを行います。</p>\n\n<table>\n<thead>\n<tr>\n<th> 処理 </th>\n<th> HTTPメソッド </th>\n<th> エンドポイントパス </th>\n<th> 備考 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>プッシュ通知作成</td>\n<td>POST      </td>\n<td> /push </td>\n<td>  </td>\n</tr>\n<tr>\n<td>プッシュ通知取得（1件）</td>\n<td>GET </td>\n<td> /push/:objectId </td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>プッシュ通知取得（複数件）</td>\n<td>GET </td>\n<td> /push/ </td>\n<td>where/order/limit/skipといったクエリパラメータを指定</td>\n</tr>\n<tr>\n<td>プッシュ通知更新</td>\n<td>PUT</td>\n<td>/push/:objectId</td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>プッシュ通知削除</td>\n<td>DELETE</td>\n<td>/push/:objectId</td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>プッシュ通知開封登録</td>\n<td>POST</td>\n<td>/push/:objectId/openNumber</td>\n<td>:objectId が可変 </td>\n</tr>\n</tbody>\n</table>\n\n\n<h2 id=\"デバイストークン\">デバイストークン</h2>\n\n<p>スマートフォンのデバイストークンを管理します。</p>\n\n<table>\n<thead>\n<tr>\n<th> 処理 </th>\n<th> HTTPメソッド </th>\n<th> エンドポイントパス </th>\n<th> 備考 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>デバイストークン作成</td>\n<td>POST      </td>\n<td> /installations </td>\n<td>  </td>\n</tr>\n<tr>\n<td>デバイストークン取得（1件）</td>\n<td>GET </td>\n<td> /installations/:objectId </td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>デバイストークン取得（複数件）</td>\n<td>GET </td>\n<td> /installations/ </td>\n<td>where/order/limit/skipといったクエリパラメータを指定</td>\n</tr>\n<tr>\n<td>デバイストークン更新</td>\n<td>PUT</td>\n<td>/installations/:objectId</td>\n<td>:objectId が可変 </td>\n</tr>\n<tr>\n<td>デバイストークン削除</td>\n<td>DELETE</td>\n<td>/installations/:objectId</td>\n<td>:objectId が可変 </td>\n</tr>\n</tbody>\n</table>\n\n\n<h2 id=\"ファイルストア\">ファイルストア</h2>\n\n<p>ファイルストレージを提供します。</p>\n\n<table>\n<thead>\n<tr>\n<th> 処理 </th>\n<th> HTTPメソッド </th>\n<th> エンドポイントパス </th>\n<th> 備考 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ファイル登録</td>\n<td>POST      </td>\n<td> /files/:fileName </td>\n<td> :fileNameを指定 </td>\n</tr>\n<tr>\n<td>ファイル取得（1件）</td>\n<td>GET </td>\n<td> /files/:fileName </td>\n<td>:fileName が可変 </td>\n</tr>\n<tr>\n<td>ファイル取得（複数件）</td>\n<td>GET </td>\n<td> /files/ </td>\n<td>where/order/limit/skipといったクエリパラメータを指定</td>\n</tr>\n<tr>\n<td>ファイル更新</td>\n<td>PUT</td>\n<td>/files/:fileName</td>\n<td>:fileName が可変 </td>\n</tr>\n<tr>\n<td>ファイル削除</td>\n<td>DELETE</td>\n<td>/files/:fileName</td>\n<td>:fileName が可変 </td>\n</tr>\n</tbody>\n</table>\n\n\n<h2 id=\"スクリプト\">スクリプト</h2>\n\n<p>スクリプトはエンドポイントのURLが異なります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>https://script.mbaas.api.nifcloud.com/2015-09-01</pre>\n\n\n<p>そして、パスは下記のようになります。:METHODは作成時に指定するHTTPメソッドです。GET/POST/PUT/DELETEのいずれかが指定できます。:fileNameはアップロードしたスクリプトのファイル名で、<em>.jsまたは</em>.rbという拡張子を持ちます。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>:METHOD /script/:fileName</pre>\n\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>mBaaSには多様なAPIが用意されています。機能的に見ればFacebookやTwitter認証など、さらに細分化されますが、基本的にはこれらの機能があると把握すれば良いでしょう。皆さんのアプリ開発に活かしてください！</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "mBaaSはアプリと連携して使うのが前提なので、APIの塊であると言えます。多数のAPIが用意されており、機能も多様です。特にSDKを開発する際などは、APIの網羅性が重要になります。 今回はmBaaSで提供されている機能をAPIの面から紹介します。",
        "date_published": "2019-09-11T02:14:51.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/17680117127213329990",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/10/103820?utm_source=feed",
        "title": "公開データと非公開データの分け方",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190704/20190704182117.png\" alt=\"f:id:mbaasdevrel:20190704182117p:plain\" title=\"f:id:mbaasdevrel:20190704182117p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>mBaaSでは、行ごとのACLのみ設定できます。あるカラムを全体公開しない、あるカラムは更新対象外にするといったことはできません。しかしユーザ情報の一部を公開したい、でも全部取得されてしまうといったニーズはあるかと思います。</p>\n\n<p>そこで今回はデータストアのTipsとして、公開/非公開データや参照のみ/更新可データの使い方を紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#クラスの分割\">クラスの分割</a></li>\n    <li><a href=\"#リレーション\">リレーション</a></li>\n    <li><a href=\"#こんな場合にも\">こんな場合にも</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"クラスの分割\">クラスの分割</h2>\n\n<p>ユーザクラスはデフォルトでは本人しか見られない状態です。ACLを変更することもできますが、クラスを分割するのがお勧めです。</p>\n\n<ul>\n<li>ユーザクラス<br/>\n自分のみ閲覧、更新可能</li>\n<li>ユーザプロフィールクラス<br/>\n誰でも閲覧可、自分のみ更新可</li>\n</ul>\n\n\n<p>このように誰でも閲覧できるクラスを設けることで、情報の出し分けが可能になります。</p>\n\n<h2 id=\"リレーション\">リレーション</h2>\n\n<p>上記の例で言うところのユーザクラスとユーザプロフィールクラスはリレーションでつないでおきます。この時、繋ぎ方としてはユーザ -> ユーザプロフィールのみで良いでしょう。ユーザプロフィールは誰でも見られますが、ユーザクラスは自分しか情報が見られません。自分であればユーザクラスから参照すれば良いだけなので、ユーザプロフィールから参照することはほぼないと言えるでしょう。</p>\n\n<pre class=\"code js\" data-lang=\"js\" data-unlink>api.User\n  .equalTo(&#39;objectId&#39;, api.User.currentUser().objectId)\n  .include(&#39;UserProfile&#39;)\n  .find();</pre>\n\n\n<p>例えばコミュニケーションアプリを作っている場合を想定します。</p>\n\n<ul>\n<li>スレッドクラス<br/>\n誰でも閲覧可、オーナーのみ更新可</li>\n<li>スレッドステータスクラス<br/>\n誰でも閲覧可、誰でも更新可</li>\n</ul>\n\n\n<p>スレッドに対するコメントによってスレッドステータスクラスを更新します。このような形式の場合はスレッドクラス -> スレッドステータスクラスを参照するリレーションを組んでおきます。</p>\n\n<h2 id=\"こんな場合にも\">こんな場合にも</h2>\n\n<p>例えば課金ユーザの状態によって機能を変えたいと思います。ユーザクラスの中に課金フラグをもたせてしまうと、ユーザ自身がそのフラグを操作できてしまいます。そこで課金状態を管理するテーブルを別で作成し、参照できるけれど更新できないデータとして定義します。そうすることで安全にアプリの機能提供ができます。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>行ごとのACLで管理できない場合は、クラス自体分けてしまいましょう。行ごとのACLだと、更新や公開されては困る情報まで出てしまう可能性があります。データストアのクラスについては自由に増やすことができますので、データを安全に保つためにもクラスの分割管理をお勧めします。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "mBaaSでは、行ごとのACLのみ設定できます。あるカラムを全体公開しない、あるカラムは更新対象外にするといったことはできません。しかしユーザ情報の一部を公開したい、でも全部取得されてしまうといったニーズはあるかと思います。 そこで今回はデータストアのTipsとして、公開/非公開データや参照のみ/更新可データの使い方を紹介します。",
        "date_published": "2019-09-10T01:38:20.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/17680117127206854066",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/10/103040?utm_source=feed",
        "title": "mBaaSでメールの文面を変更するには",
        "content_html": "<p>mBaaSではユーザに対してメールを送信する機能があります。認証向けの機能ですが、以下の4つのパターンに分類されます。</p>\n\n<ul>\n<li>メールアドレス確認メール（登録時）</li>\n<li>メールアドレス確認メール（更新時）</li>\n<li>メールアドレス確認完了メール</li>\n<li>パスワードリマインダー</li>\n</ul>\n\n\n<p>今回はこのメールの件名、文面を編集する方法について紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#管理画面にて編集\">管理画面にて編集</a></li>\n    <li><a href=\"#メール件名文面で使えるキーワード\">メール件名、文面で使えるキーワード</a></li>\n    <li><a href=\"#メール設定を忘れずに\">メール設定を忘れずに</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"管理画面にて編集\">管理画面にて編集</h2>\n\n<p>メール文面はアプリ設定の会員認証設定で確認できます。全部で四種類用意されています。</p>\n\n<table>\n<thead>\n<tr>\n<th> 管理画面上の文言                 </th>\n<th> 処理内容                           </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> メールアドレスの確認文面         </td>\n<td> メールアドレス確認メール（更新時） </td>\n</tr>\n<tr>\n<td> パスワードリセットの文面         </td>\n<td> パスワードリマインダー             </td>\n</tr>\n<tr>\n<td> メールアドレス会員登録の文面     </td>\n<td> メールアドレス確認メール（登録時） </td>\n</tr>\n<tr>\n<td> メールアドレス会員登録完了の文面 </td>\n<td> メールアドレス確認完了メール       </td>\n</tr>\n</tbody>\n</table>\n\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190624/20190624235340.png\" alt=\"f:id:mbaasdevrel:20190624235340p:plain\" title=\"f:id:mbaasdevrel:20190624235340p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<h2 id=\"メール件名文面で使えるキーワード\">メール件名、文面で使えるキーワード</h2>\n\n<p>メールは <code>%〜%</code> で囲まれたキーワードを使うことで、アプリ固有の情報に置き換えられます。</p>\n\n<table>\n<thead>\n<tr>\n<th> キーワード </th>\n<th> 内容                                                              </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td> %username% </td>\n<td> 会員の表示名                                                      </td>\n</tr>\n<tr>\n<td> %email%    </td>\n<td> 会員のメールアドレス                                              </td>\n</tr>\n<tr>\n<td> %appname%  </td>\n<td> アプリ名                                                          </td>\n</tr>\n<tr>\n<td> %link%     </td>\n<td> 会員がメールアドレス確認するのに踏まなければならないリンクへのURL </td>\n</tr>\n</tbody>\n</table>\n\n\n<p><code>%link</code> はメールアドレス確認完了メール以外は必須です。これがないとメールアドレスが確認できませんので、必ず記載してください。</p>\n\n<h2 id=\"メール設定を忘れずに\">メール設定を忘れずに</h2>\n\n<p>すべてのメールはメール設定で送信する設定をしないと配信されないので注意してください。 <code>確認メールの送信</code> を送信するに指定してください。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190624/20190624235441.png\" alt=\"f:id:mbaasdevrel:20190624235441p:plain\" title=\"f:id:mbaasdevrel:20190624235441p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>なお、送信元メールアドレスは変更できますが、 <code>mbaas.nifcloud.com</code> 以外のドメインを指定するとなりすましメールと判定される可能性があるので注意してください。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>メールはパスワードリマインダーをはじめとして、mBaaSで大事な情報になります。それだけにメールの文面はこだわって設定した方が良いでしょう。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "mBaaSではユーザに対してメールを送信する機能があります。認証向けの機能ですが、以下の4つのパターンに分類されます。 メールアドレス確認メール（登録時） メールアドレス確認メール（更新時） メールアドレス確認完了メール パスワードリマインダー 今回はこのメールの件名、文面を編集する方法について紹介します。",
        "date_published": "2019-09-10T01:30:40.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/17680117127204185504",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/06/094900?utm_source=feed",
        "title": "データストアの取得を高速化するには",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20180913/20180913163950.png\" alt=\"f:id:mbaasdevrel:20180913163950p:plain\" title=\"f:id:mbaasdevrel:20180913163950p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>データストアは通常のRDBMSとは異なり、NoSQL型データベースになっています。そのため、特性を理解してデータ取得を行わないと、思ったよりもパフォーマンスが出ないと言った問題になります。</p>\n\n<p>今回はskipを指定した場合のデータ取得について解説します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#skipを使うと遅くなる\">skipを使うと遅くなる？</a></li>\n    <li><a href=\"#検証\">検証</a><ul>\n            <li><a href=\"#スキップを使う場合\">スキップを使う場合</a></li>\n            <li><a href=\"#数値を使う場合\">数値を使う場合</a></li>\n        </ul>\n    </li>\n    <li><a href=\"#検証結果\">検証結果</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"skipを使うと遅くなる\">skipを使うと遅くなる？</h2>\n\n<p>skipは1000件を超えるデータがあるクラスに対して、どの範囲でデータを取得するのか指定する時に使います。例えば2000件目から100件取得するといった場合です。<a href=\"https://mbaas.nifcloud.com/doc/current/common/dev_keye.html\">ドキュメント : 開発ガイドライン | ニフクラ mobile backend</a>によると、下記のように書かれています。</p>\n\n<blockquote><p>skipの分だけ読み飛ばして、limit分を返却するため、skipが大きくなるに従ってパフォーマンスが劣化します。　</p></blockquote>\n\n<h2 id=\"検証\">検証</h2>\n\n<p>今回はデータストアのクラスに5万件のデータを登録しています。実運用ではこの十倍ということも少なくないでしょう。そして、そのデータをskipを使った場合と、データに1から順番に数字をもたせておき、その数字を使って取得する場合の2パターンで検証します。</p>\n\n<h3 id=\"スキップを使う場合\">スキップを使う場合</h3>\n\n<p>今回はJavaScript SDKを使っています。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synStatement\">for</span> (i = 0; i &lt;= 50; i++) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> loopStart = <span class=\"synType\">Date</span>.now();\n  await Speed\n    .skip(i * 1000)\n    .limit(1000)\n    .order(<span class=\"synConstant\">'createDate'</span>)\n    .fetchAll();\n  <span class=\"synStatement\">const</span> loopEnd = <span class=\"synType\">Date</span>.now();\n  console.log(loopEnd - loopStart);\n<span class=\"synIdentifier\">}</span>\n</pre>\n\n\n<h3 id=\"数値を使う場合\">数値を使う場合</h3>\n\n<p>数値を使う場合は、最後のデータを取って、次のループではその数値以降のデータを取得しています。</p>\n\n<pre class=\"code lang-javascript\" data-lang=\"javascript\" data-unlink><span class=\"synIdentifier\">let</span> max = 0;\n<span class=\"synStatement\">for</span> (i = 0; i &lt;= 50; i++) <span class=\"synIdentifier\">{</span>\n  <span class=\"synStatement\">const</span> loopStart = <span class=\"synType\">Date</span>.now();\n  <span class=\"synStatement\">const</span> items = await Speed\n    .greaterThan(<span class=\"synConstant\">'number'</span>, max)\n    .limit(1000)\n    .order(<span class=\"synConstant\">'createDate'</span>)\n    .fetchAll();\n  <span class=\"synStatement\">const</span> loopEnd = <span class=\"synType\">Date</span>.now();\n  console.log(loopEnd - loopStart);\n  max = items<span class=\"synIdentifier\">[</span>items.length-1<span class=\"synIdentifier\">]</span>.number;\n<span class=\"synIdentifier\">}</span>\n</pre>\n\n\n<h2 id=\"検証結果\">検証結果</h2>\n\n<p>検証結果は次のようになりました。3回実行して平均値を取っています。</p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190621/20190621145524.png\" alt=\"f:id:mbaasdevrel:20190621145524p:plain\" title=\"f:id:mbaasdevrel:20190621145524p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>数値の場合は500ms前後で安定していますが（一度飛び抜けていますが、これは例外値でしょう）、スキップを使った場合は20回目のループ以降（2万件以降）徐々にレスポンスが悪くなっているのが分かります。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>今回の結果を見る限り、大量のデータがある時にスキップを使うのはお勧めできなさそうです。日付であったり、数値など何らかの検索条件を適用した上でデータを取得する方法がお勧めです。</p>\n\n<p><a href=\"https://mbaas.nifcloud.com/doc/current/common/dev_keye.html#%E5%86%85%E9%83%A8%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6(%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B9%E3%83%88%E3%82%A2%EF%BC%8F%E4%BC%9A%E5%93%A1%E7%AE%A1%E7%90%86%EF%BC%8F%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E7%AD%89%E5%85%B1%E9%80%9A\">ドキュメント : 開発ガイドライン | ニフクラ mobile backend</a>)</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "データストアは通常のRDBMSとは異なり、NoSQL型データベースになっています。そのため、特性を理解してデータ取得を行わないと、思ったよりもパフォーマンスが出ないと言った問題になります。 今回はskipを指定した場合のデータ取得について解説します。",
        "date_published": "2019-09-06T00:49:00.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/17680117127204169175",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/06/094805?utm_source=feed",
        "title": "データストアのTips紹介",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20180913/20180913163950.png\" alt=\"f:id:mbaasdevrel:20180913163950p:plain\" title=\"f:id:mbaasdevrel:20180913163950p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>データストアのちょっとしたTipsを幾つか紹介します。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#あるフィールドのデータを削除するには\">あるフィールドのデータを削除するには</a></li>\n    <li><a href=\"#数値型は64bit整数が扱えます\">数値型は64bit整数が扱えます</a></li>\n    <li><a href=\"#オブジェクトを検索できます\">オブジェクトを検索できます</a></li>\n    <li><a href=\"#includeは一つのみです\">includeは一つのみです</a></li>\n    <li><a href=\"#skipはパフォーマンス上よくありません\">skipはパフォーマンス上、よくありません</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"あるフィールドのデータを削除するには\">あるフィールドのデータを削除するには</h2>\n\n<p>データ一行全体を消すのはAPIもSDKによる操作も用意されていますが、一つのフィールドにあるデータを消す場合には null で更新します。そうすると、フィールドが存在しない状態とは異なりますが、データが消えます。</p>\n\n<p>ただし、検索時にnullを指定するとデータが抽出されるので注意してください。</p>\n\n<h2 id=\"数値型は64bit整数が扱えます\">数値型は64bit整数が扱えます</h2>\n\n<p>例えば <code>9223372036854775807</code> は保存可能です。ただし、管理画面（JavaScript）から扱える数値の限界（32bit）を超えているため、表示が丸まってしまったり、保存しようとするとエラーになります。SDKやAPIからのみ操作可能です。</p>\n\n<h2 id=\"オブジェクトを検索できます\">オブジェクトを検索できます</h2>\n\n<p>オブジェクト型で登録している場合、その内容で検索できます。例えば <code>{\"a\": \"b\", \"c\": \"d\"}</code> で保存されている場合、 <code>equalTo(\"field\", {a: \"b\"})</code> で検索するといった具合です。ただし以上、以下や範囲などでは検索できないので注意してください。</p>\n\n<h2 id=\"includeは一つのみです\">includeは一つのみです</h2>\n\n<p>一つのクエリで呼び出せる関連オブジェクトは一つのみになります。 include を複数指定した場合、最初に子要素が呼び出せたものが優先になります。</p>\n\n<h2 id=\"skipはパフォーマンス上よくありません\">skipはパフォーマンス上、よくありません</h2>\n\n<p>skipは最初の行から指定された数値分読み飛ばして、その上でlimitで指定された数分返却します。そのため、数千行であれば問題ありませんが数十万行ある時にスキップするとパフォーマンスが低下します。</p>\n\n<p>以上、以下条件を付与するなどするとパフォーマンスが向上するかも知れません。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>データストアは簡単に使えますが、意外と奥深い仕組みになります。通常のRDBMSの感覚とは少し異なるので、データストアならではの使いこなし方を習得してください！</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "データストアのちょっとしたTipsを幾つか紹介します。",
        "date_published": "2019-09-06T00:48:05.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/17680117127215895218",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/04/105459?utm_source=feed",
        "title": "非公式Java SDKでデータストアの検索条件を追加しました",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190318/20190318155501.png\" alt=\"f:id:mbaasdevrel:20190318155501p:plain\" title=\"f:id:mbaasdevrel:20190318155501p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>Java言語で作られているAndroid SDKですが、これはAndroidが必須である、サーバサイドのJavaでは動作しません。そこで非公式ながらサーバサイドのJavaで動作するSDKを開発しています。</p>\n\n<p>今回は多数存在するmBaaSの検索条件に対応しました。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#利用法\">利用法</a></li>\n    <li><a href=\"#対応している検索条件について\">対応している検索条件について</a></li>\n    <li><a href=\"#コードについて\">コードについて</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"利用法\">利用法</h2>\n\n<p>実際のコードは次のようになります。</p>\n\n<pre class=\"code lang-java\" data-lang=\"java\" data-unlink>String applicationKey = <span class=\"synConstant\">&quot;b34...01e&quot;</span>;\nString clientKey = <span class=\"synConstant\">&quot;489...462&quot;</span>;\nNCMB ncmb = <span class=\"synStatement\">new</span> NCMB(applicationKey, clientKey);\n<span class=\"synStatement\">try</span> {\n  NCMBQuery Hello = ncmb.NCMBQuery(<span class=\"synConstant\">&quot;Hello&quot;</span>);\n  Hello.whereGreaterThanOrEqualTo(<span class=\"synConstant\">&quot;int&quot;</span>, <span class=\"synConstant\">400</span>);\n  Hello.whereLessThan(<span class=\"synConstant\">&quot;int&quot;</span>, <span class=\"synConstant\">800</span>);\n  ArrayList&lt;NCMBObject&gt; ary = Hello.find();\n  ary.forEach((o) -&gt; {\n    <span class=\"synStatement\">try</span> {\n      System.out.println(o.getInt(<span class=\"synConstant\">&quot;int&quot;</span>));\n    } <span class=\"synStatement\">catch</span> (NCMBException e) {\n      System.out.println(e);\n    }\n  });\n} <span class=\"synStatement\">catch</span> (NCMBException e) {\n  System.err.println(e.getMessage());\n}\n</pre>\n\n\n<h2 id=\"対応している検索条件について\">対応している検索条件について</h2>\n\n<p>現在、下記のメソッドがあります。</p>\n\n<ul>\n<li>whereEqualTo</li>\n<li>whereContainedIn</li>\n<li>whereContainedInArray</li>\n<li>whereContainsAll</li>\n<li>whereDoesNotExists</li>\n<li>whereExists</li>\n<li>whereGreaterThan</li>\n<li>whereGreaterThanOrEqualTo</li>\n<li>whereLessThan</li>\n<li>whereLessThanOrEqualTo</li>\n<li>whereNotContainedIn</li>\n<li>whereNotContainedInArray</li>\n<li>whereNotEqualTo</li>\n</ul>\n\n\n<p>これらのメソッドは<a href=\"https://mbaas.nifcloud.com/assets/sdk_doc/android/javadoc/index.html\">Android SDKのNCMBQuery</a>に合わせてあります。使い方も変わりません。</p>\n\n<h2 id=\"コードについて\">コードについて</h2>\n\n<p>コードは<a href=\"https://github.com/NCMBMania/java-sdk\">NCMBMania/java-sdk</a>にあります。まだ開発中であまり機能はありません。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>mBaaSでは他にも位置情報による検索、サブクエリでの検索、OR条件など複雑な条件指定が可能になっています。Java SDKではまだ網羅していませんが、徐々に実装していきます。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "Java言語で作られているAndroid SDKですが、これはAndroidが必須である、サーバサイドのJavaでは動作しません。そこで非公式ながらサーバサイドのJavaで動作するSDKを開発しています。 今回は多数存在するmBaaSの検索条件に対応しました。",
        "date_published": "2019-09-04T01:54:59.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      },
      {
        "key": "hatenablog://entry/17680117127213803242",
        "url": "https://blog.mbaas.nifcloud.com/entry/2019/09/04/105450?utm_source=feed",
        "title": "非公式Java SDKで会員登録に対応しました",
        "content_html": "<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20190318/20190318155501.png\" alt=\"f:id:mbaasdevrel:20190318155501p:plain\" title=\"f:id:mbaasdevrel:20190318155501p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>Java言語で作られているAndroid SDKですが、これはAndroidが必須である、サーバサイドのJavaでは動作しません。そこで非公式ながらサーバサイドのJavaで動作するSDKを開発しています。</p>\n\n<p>基本的なデータ保存はできるようになったので、今回は会員登録処理に対応しました。</p>\n\n<ul class=\"table-of-contents\">\n    <li><a href=\"#利用法\">利用法</a></li>\n    <li><a href=\"#コードについて\">コードについて</a></li>\n    <li><a href=\"#まとめ\">まとめ</a></li>\n</ul>\n\n<h2 id=\"利用法\">利用法</h2>\n\n<p>実際のコードは次のようになります。</p>\n\n<pre class=\"code lang-java\" data-lang=\"java\" data-unlink>String applicationKey = <span class=\"synConstant\">&quot;b34...01e&quot;</span>;\nString clientKey = <span class=\"synConstant\">&quot;489...462&quot;</span>;\nNCMB ncmb = <span class=\"synStatement\">new</span> NCMB(applicationKey, clientKey);\n<span class=\"synStatement\">try</span> {\n  NCMBUser user = ncmb.NCMBUser();\n  user.put(<span class=\"synConstant\">&quot;userName&quot;</span>, <span class=\"synConstant\">&quot;test_user&quot;</span>);\n  user.put(<span class=\"synConstant\">&quot;password&quot;</span>, <span class=\"synConstant\">&quot;password&quot;</span>);\n  <span class=\"synStatement\">if</span> (user.signUp()) {\n    System.out.println(user.getString(<span class=\"synConstant\">&quot;objectId&quot;</span>));\n  } <span class=\"synStatement\">else</span> {\n    System.err.println(<span class=\"synConstant\">&quot;Login failed.&quot;</span>);\n  }\n} <span class=\"synStatement\">catch</span> (NCMBException e) {\n  System.err.println(e.getMessage());\n}\n</pre>\n\n\n<p>signUpがfalseの場合はログイン失敗になります。ユーザが重複している、パスワードが間違っているなどが想定されます。</p>\n\n<h2 id=\"コードについて\">コードについて</h2>\n\n<p>コードは<a href=\"https://github.com/NCMBMania/java-sdk\">NCMBMania/java-sdk</a>にあります。まだ開発中であまり機能はありません。</p>\n\n<h2 id=\"まとめ\">まとめ</h2>\n\n<p>ユーザ登録処理ができれば、ログイン処理自体はさほど難しくありません。認証データはACLを使ったデータ管理にも使いますので、皆さんのアプリ開発で役立つはずです。</p>\n\n<div class=\"p-author\">\n  <div class=\"p-author__avatar-btn\">\n  <div class=\"p-author__avatar c-avatar\">\n  <img class=\"author-photo\" alt='中津川 篤司' src='https://cdn-ak.f.st-hatena.com/images/fotolife/m/mbaasdevrel/20171120/20171120100218.jpg'>\n  </div>\n    </div>\n  <div class=\"p-author__body\">\n    <p class=\"c-txt-bold\">中津川 篤司 </p>\n    <p class=\"c-txt-basic p-author__info\">\n      NCMBエヴァンジェリスト。プログラマ、エンジニアとしていくつかの企業で働き、28歳のときに独立。 2004年、まだ情報が少なかったオープンソースソフトの技術ブログ「<a href=\"https://www.moongift.jp/\" target=\"_blank\">MOONGIFT</a>」を開設し、毎日情報を発信している。2013年に法人化、ビジネスとエンジニアを結ぶDXエージェンシー「<a href=\"https://devrel.jp\" target=\"_blank\">DevRel</a>」活動をスタート。\n    </p>\n  </div>\n</div>",
        "summary": "Java言語で作られているAndroid SDKですが、これはAndroidが必須である、サーバサイドのJavaでは動作しません。そこで非公式ながらサーバサイドのJavaで動作するSDKを開発しています。 基本的なデータ保存はできるようになったので、今回は会員登録処理に対応しました。",
        "date_published": "2019-09-04T01:54:50.000Z",
        "author": {
          "name": "mbaasdevrel"
        }
      }
    ]
}